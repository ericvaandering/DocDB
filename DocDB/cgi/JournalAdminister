#! /usr/bin/env perl

use lib ".";

#
# Description: This script is called by AdministerForm and does administration
#              on journals in the DB. This script adds, modifies and deletes
#              journals.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified:

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "MiscSQL.pm";
require "JournalHTML.pm";
require "Messages.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

@ErrorStack = ();
@WarnStack  = ();

# Parameters to script

my $Password = $Untaint -> extract(-as_printable => "password") || "";
my $Username = $Untaint -> extract(-as_printable => "admuser") || "";
my $Action = $Untaint -> extract(-as_printable => "admaction") || "";

my $JournalID = $Untaint -> extract(-as_integer => "journal") || 0;
my $FullName = $Untaint -> extract(-as_safehtml => "name") || "";
my $Abbreviation = $Untaint -> extract(-as_safehtml => "abbr") || "";
my $Acronym = $Untaint -> extract(-as_safehtml => "acronym") || "";
my $Publisher = $Untaint -> extract(-as_safehtml => "pub") || "";
my $URL = $Untaint -> extract(-as_safehtml => "url") || "";

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}
print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("Modified List of Institutions");

&EndPage(@ErrorStack);

unless (&CanAdminister) {
  push @ErrorStack,$Msg_AdminNoLogin;
}
&EndPage(@ErrorStack);

&GetJournals;

if      ($Action eq "Delete") { # Delete institutions
  if (!$JournalID) {
    push @ErrorStack,$Msg_ModJournalEmpty;
  } else {
    my $JournalDelete = $dbh -> prepare("delete from Journal where JournalID=?");
    $JournalDelete -> execute($JournalID);
    print "<b>$Journals{$JournalID}{Name} has been deleted.</b><br>\n";
  }
} elsif ($Action eq "Modify") { # Modify journals
  unless ($JournalID) {
    push @ErrorStack,$Msg_ModJournalEmpty;
  }
  &EndPage(@ErrorStack);

# Deal with name changes

  if ($FullName) {
    print "<b>Updating journal name.</b><br>\n";
    my $JournalUpdate = $dbh->prepare(
       "update Journal set Name=? where JournalID=?");
    $JournalUpdate -> execute($FullName,$JournalID);
  }
  if ($Abbreviation) {
    print "<b>Updating journal abbreviation.</b><br>\n";
    my $JournalUpdate = $dbh->prepare(
       "update Journal set Abbreviation=? where JournalID=?");
    $JournalUpdate -> execute($Abbreviation,$JournalID);
  }
  if ($Acronym) {
    print "<b>Updating journal acronym.</b><br>\n";
    my $JournalUpdate = $dbh->prepare(
       "update Journal set Acronym=? where JournalID=?");
    $JournalUpdate -> execute($Acronym,$JournalID);
  }
  if ($Publisher) {
    print "<b>Updating journal publisher.</b><br>\n";
    my $JournalUpdate = $dbh->prepare(
       "update Journal set Publisher=? where JournalID=?");
    $JournalUpdate -> execute($Publisher,$JournalID);
  }
  if ($URL) {
    print "<b>Updating journal URL.</b><br>\n";
    my $JournalUpdate = $dbh->prepare(
       "update Journal set URL=? where JournalID=?");
    $JournalUpdate -> execute($URL,$JournalID);
  }

} elsif ($Action eq "New") { # Create new journals
  print "<b>Adding a new journal.</b><br>\n";
  my $JournalInsert = $dbh->prepare(
   "insert into Journal (JournalID,Name,Abbreviation,Publisher,URL,Acronym) ".
   "             values (0,?,?,?,?,?)");

  $JournalInsert -> execute($FullName,$Abbreviation,$Publisher,$URL,$Acronym);
  $JournalID = $JournalInsert -> {mysql_insertid}; # Works with MySQL only
} else {
  push @ErrorStack,"No valid action was specified.";
}

# For modify or new fetch institution information and display.

if ($Action eq "Modify" || $Action eq "New") {
  &GetJournals;
  print "<p><b>Here are the results of your modification:  <br>\n";
  print "Name:         $Journals{$JournalID}{Name}         <br>\n";
  print "Abbreviation: $Journals{$JournalID}{Abbreviation} <br>\n";
  print "Acronym:      $Journals{$JournalID}{Acronym}      <br>\n";
  print "Publisher:    $Journals{$JournalID}{Publisher}    <br>\n";
  print "URL:          $Journals{$JournalID}{URL}          <br>\n";
  print "</b><p>\n";
}

print "<p>\n";

&WarnPage(@WarnStack);
&EndPage(@ErrorStack);

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
