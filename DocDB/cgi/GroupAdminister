#! /usr/bin/env perl

use lib ".";

#
#        Name: GroupAdminister
# Description: This script is called by GroupAdministerForm and does
#              administration on Groups in the DB. This script adds, modifies
#              and deletes groups. It also displays all the groups and their
#              relationships since this can be difficult to understand.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified:

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "SecuritySQL.pm";
require "GroupHTML.pm";
require "Messages.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

@ErrorStack = ();
@WarnStack  = ();

# Parameters to script

my $Password = $Untaint -> extract(-as_printable => "password") || "";
my $Username = $Untaint -> extract(-as_printable => "admuser") || "";
my $Action = $Untaint -> extract(-as_printable => "admaction") || "";
my $Force = $Untaint -> extract(-as_printable => "admforce") || "";

my $Description = $Untaint -> extract(-as_safehtml => "description") || "";
my $Name = $Untaint -> extract(-as_safehtml => "name") || "";
my $ParentID = $Untaint -> extract(-as_integer => "parent") || 0;
my @ChildIDs = @{ $Untaint -> extract(-as_listofint => "child") || undef };
my $View = $Untaint -> extract(-as_printable => "view") || "";
my $Create = $Untaint -> extract(-as_printable => "create") || "";
my $Admin = $Untaint -> extract(-as_printable => "admin") || "";
my $NoPerm = $Untaint -> extract(-as_printable => "remove") || "";
my $RemoveChildren = $Untaint -> extract(-as_printable => "removesubs") || "";

if ($View)           {$View   = 1;} # Make sure they are in format MySQL is expecting
else                 {$View   = 0;}
if ($Create)         {$Create = 1;}
else                 {$Create = 0;}
if ($Admin)          {$Admin  = 1;}
else                 {$Admin  = 0;}
if ($NoPerm)         {$NoPerm = 1;}
else                 {$NoPerm = 0;}
if ($RemoveChildren) {$RemoveChildren = 1;}
else                 {$RemoveChildren = 0;}

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader("Modified Groups");

EndPage(@ErrorStack);

unless (CanAdminister()) {
  push @ErrorStack,$Msg_AdminNoLogin;
}
EndPage(@ErrorStack);

GetSecurityGroups();

if      ($Action eq "Delete") { # Delete group
  if (!$ParentID) {
    push @ErrorStack,$Msg_ModGroupEmpty;
  } elsif (!$SecurityGroups{$ParentID}{TimeStamp}) {
    push @ErrorStack,$Msg_ModGroupNone;
  } else {
    my $Count;
    my $TotalCount;
    if (!$Force) {
      my $RSC = $dbh -> prepare("select COUNT(RevSecurityID)     from RevisionSecurity where GroupID=?");
      my $RMC = $dbh -> prepare("select COUNT(RevModifyID)       from RevisionModify   where GroupID=?");
      my $MSC = $dbh -> prepare("select COUNT(MeetingSecurityID) from MeetingSecurity  where GroupID=?");
      my $MMC = $dbh -> prepare("select COUNT(MeetingModifyID)   from MeetingModify    where GroupID=?");
      my $EUC = $dbh -> prepare("select COUNT(UsersGroupID)      from UsersGroup       where GroupID=?");

      $RSC -> execute($ParentID);
      $RMC -> execute($ParentID);
      $MSC -> execute($ParentID);
      $MMC -> execute($ParentID);
      $EUC -> execute($ParentID);

      ($Count) = $RSC -> fetchrow_array;
      if ($Count) {
        push @WarnStack,"Action would change view list on $Count document(s).";
      }
      $TotalCount += $Count;
      ($Count) = $RMC -> fetchrow_array;
      if ($Count) {
        push @WarnStack,"Action would change modify list on $Count document(s).";
      }
      $TotalCount += $Count;
      ($Count) = $MSC -> fetchrow_array;
      if ($Count) {
        push @WarnStack,"Action would change view list on $Count event(s).";
      }
      $TotalCount += $Count;
      ($Count) = $MMC -> fetchrow_array;
      if ($Count) {
        push @WarnStack,"Action would change modify list on $Count event(s).";
      }
      $TotalCount += $Count;
      ($Count) = $EUC -> fetchrow_array;
      if ($Count) {
        push @WarnStack,"Action would change groups for $Count user(s).";
      }
      $TotalCount += $Count;
    }

    if ($Force || !$TotalCount) {
      my $RSD = $dbh -> prepare("delete from RevisionSecurity where GroupID=?");
      my $RMD = $dbh -> prepare("delete from RevisionModify   where GroupID=?");
      my $MSD = $dbh -> prepare("delete from MeetingSecurity  where GroupID=?");
      my $MMD = $dbh -> prepare("delete from MeetingModify    where GroupID=?");
      my $EUD = $dbh -> prepare("delete from UsersGroup       where GroupID=?");
      my $HD  = $dbh -> prepare("delete from GroupHierarchy   where ParentID=? or ChildID=?");
      my $SGD = $dbh -> prepare("delete from SecurityGroup    where GroupID=?");
      $Count = $RSD -> execute($ParentID);
      if (int($Count)) {
        push @ActionStack,"Group removed from view list on $Count document(s).";
      }
      $Count = $RMD -> execute($ParentID);
      if (int($Count)) {
        push @ActionStack,"Group removed from modify list on $Count document(s).";
      }
      $Count = $MSD -> execute($ParentID);
      if (int($Count)) {
        push @ActionStack,"Group removed from view list on $Count event(s).";
      }
      $Count = $MMD -> execute($ParentID);
      if (int($Count)) {
        push @ActionStack,"Group removed from modify list on $Count event(s).";
      }
      $Count = $EUD -> execute($ParentID);
      if (int($Count)) {
        push @ActionStack,"Group removed from $Count users(s).";
      }
      $Count = $HD  -> execute($ParentID,$ParentID);
      if (int($Count)) {
        push @ActionStack,"$Count inter-group relationship(s) removed.";
      }
      $Count = $SGD -> execute($ParentID);
      push @ActionStack,"$SecurityGroups{$ParentID}{NAME} has been deleted.";
      push @ActionStack,"Remove group from .htpasswd file and run scripts/Resecure if applicable.";
    } else {
      push @ErrorStack,"Action could lead to unintended consequences.
                        Use the <strong>force</strong> option if you want to proceed.";
    }
  }
} elsif ($Action eq "Modify") { # Modify group
  unless ($ParentID) {
    push @ErrorStack,$Msg_ModGroupEmpty;
  }
  EndPage(@ErrorStack);

# Deal with name changes

  if ($Name) {
    push @ActionStack,"Updating group name.";
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set Name=? where GroupID=?");
    $GroupUpdate -> execute($Name,$ParentID);
  }
  if ($Description) {
    push @ActionStack,"Updating group description.";
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set Description=? where GroupID=?");
    $GroupUpdate -> execute($Description,$ParentID);
  }

# Update parent child relationships. Delete the old and add new relationships

  if (@ChildIDs || $RemoveChildren) {
    push @ActionStack,"Deleting all subordinate relationships.";
    my $HierarchyDelete = $dbh -> prepare("delete from GroupHierarchy   ".
                                    "where ParentID=?");
       $HierarchyDelete -> execute($ParentID);

    my $HierarchyInsert = $dbh->prepare(
     "insert into GroupHierarchy (HierarchyID,ChildID,ParentID) ".
                         "values (0,?,?)");
    foreach my $ChildID (@ChildIDs) {
      if ($ChildID && $ChildID != $ParentID) {
        push @ActionStack,"Adding subordinate.";
        $HierarchyInsert -> execute($ChildID,$ParentID);
      }
    }
  }

# Update permissions

  if ($NoPerm) {
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set CanCreate=0,CanAdminister=0,CanView=0,CanConfig=0 where GroupID=?");
    $GroupUpdate -> execute($ParentID);
  }
  if ($View) {
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set CanView=1 where GroupID=?");
    $GroupUpdate -> execute($ParentID);
  }
  if ($Create) {
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set CanCreate=1 where GroupID=?");
    $GroupUpdate -> execute($ParentID);
  }
  if ($Admin) {
    my $GroupUpdate = $dbh->prepare(
       "update SecurityGroup set CanAdminister=1 where GroupID=?");
    $GroupUpdate -> execute($ParentID);
  }

} elsif ($Action eq "New") { # Create new groups
  push @ActionStack,"Adding a new group.";
  my $GroupInsert = $dbh->prepare(
   "insert into SecurityGroup (Name,Description,CanCreate,CanAdminister,CanView,CanConfig) ".
                      "values (?,?,?,?,?,0)");

  $GroupInsert -> execute($Name,$Description,$Create,$Admin,$View);
  $ParentID = $GroupInsert -> {mysql_insertid}; # Works with MySQL only

  my $HierarchyInsert = $dbh->prepare(
   "insert into GroupHierarchy (HierarchyID,ChildID,ParentID) ".
                       "values (0,?,?)");
  foreach my $ChildID (@ChildIDs) {
    if ($ChildID && $ChildID != $ParentID) {
      $HierarchyInsert -> execute($ChildID,$ParentID);
    }
  }
} else {
  push @ErrorStack,"No valid action was specified.";
}

# For modify or new fetch institution information and display.

ActionReport();
WarnPage(@WarnStack);
EndPage(@ErrorStack);

if ($Action eq "Modify" || $Action eq "New") {
  ClearSecurityGroups();
  GetSecurityGroups();
  print "<h4>This is the new group information:</h4>\n";
  print '<table class="HighPaddedTable CenteredTable">';
  print "<tr>\n";
  print "<td><strong>$SecurityGroups{$ParentID}{NAME}</strong><br/>
         ($SecurityGroups{$ParentID}{Description})</td>\n";
  print "<td>\n";
  print "Dominant groups:\n";
  PrintGroupParents($ParentID);
  print "</td>\n";
  print "<td>\n";
  print "Subordinate groups:\n";
  PrintGroupChildren($ParentID);
  print "</td>\n";
  print "<td>\n";
  print "Permissions:\n";
  PrintGroupPermissions($ParentID);
  print "</td>\n";
  print "</tr>\n";
  print "</table>\n";
}

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
