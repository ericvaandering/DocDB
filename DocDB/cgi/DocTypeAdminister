#! /usr/bin/env perl

use lib ".";

#
#        Name: DocTypeAdminister
# Description: This script is called by AdministerForm and does administration
#              on document types in the DB. This script adds, modifies and
#              deletes document types.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified:

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "MiscSQL.pm";
require "DocTypeHTML.pm";
require "Messages.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

# Parameters to script

my $Password = $Untaint -> extract(-as_printable => "password") || "";
my $Username = $Untaint -> extract(-as_printable => "admuser") || "";
my $Action = $Untaint -> extract(-as_printable => "admaction") || "";

my $DocTypeID = $Untaint -> extract(-as_integer => "doctype") || 0;
my $ShortName = $Untaint -> extract(-as_safehtml => "name") || "";
my $LongName = $Untaint -> extract(-as_safehtml => "longdesc") || "";

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader("Modified List of Document Types");
EndPage();

unless (CanAdminister()) {
  push @ErrorStack,$Msg_AdminNoLogin;
}
EndPage();

GetDocTypes();

if      ($Action eq "Delete") { # Delete institutions
  if (!$DocTypeID) {
    push @ErrorStack,$Msg_ModDocTypeEmpty;
  } else {
    my $DocTypeDelete = $dbh -> prepare("delete from DocumentType where DocTypeID=?");
    $DocTypeDelete -> execute($DocTypeID);
    push @ActionStack,"$DocumentTypes{$DocTypeID}{SHORT} deleted.";
  }
} elsif ($Action eq "Modify") { # Modify journals
  if (!$DocTypeID) {
    push @ErrorStack,$Msg_ModDocTypeEmpty;
  }
  EndPage();

# Deal with name changes

  if ($ShortName) {
    push @ActionStack,"Changed document type's short name to $ShortName";
    my $DocTypeUpdate = $dbh->prepare("update DocumentType set ShortType=? where DocTypeID=?");
    $DocTypeUpdate -> execute($ShortName,$DocTypeID);
  }
  if ($LongName) {
    push @ActionStack,"Changed document type's long name to $LongName";
    my $DocTypeUpdate = $dbh -> prepare("update DocumentType set LongType=? where DocTypeID=?");
    $DocTypeUpdate -> execute($LongName,$DocTypeID);
  }
} elsif ($Action eq "New") { # Create new journals
  push @ActionStack,"Added document type with short name $ShortName";
  my $DocTypeInsert = $dbh -> prepare("insert into DocumentType (DocTypeID,ShortType,LongType) values (0,?,?)");
  $DocTypeInsert -> execute($ShortName,$LongName);
  $DocTypeID = $DocTypeInsert -> {mysql_insertid}; # Works with MySQL only
} else {
  push @ErrorStack,"No valid action was specified.";
}

# For modify or new fetch institution information and display.

ActionReport();
EndPage();

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
