#! /usr/bin/env perl

use lib ".";

#        Name: $RCSfile$
# Description: Displays the document (or document and version)
#              to be deleted and requests the admin password.
#              Calls DeleteDocument to delete the doc.
#
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "SecuritySQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";

require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "AdministerElements.pm";
require "Security.pm";

require "RevisionHTML.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetSecurityGroups;

my $Untaint = CGI::Untaint -> new($query -> Vars);

my $DocumentID = $Untaint -> extract(-as_typedint => "docid") || 0;
my $DelVersion = $Untaint -> extract(-as_typedint => "version") || 0;

@ErrorStack = ();

unless ($DocumentID) {
  push @ErrorStack,"You are must supply a document number to delete.";
}
unless (&CanAdminister) {
  push @ErrorStack,"You must be logged in as the administrator to delete
  documents";
}

EndPage(-startpage => $TRUE);

&GetSecurityGroups;
&FetchDocument($DocumentID);


my $Version = $Documents{$DocumentID}{NVersions}; # Show latest version if not supplied
if ($DelVersion) {
  $Version = $DelVersion;
}

print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("Confirm Deletion of Document $DocumentID-v$DelVersion");

my $DocRevID   = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
push @DebugStack, "Requested document $DocumentID -v $Version returned DRI $DocRevID";

unless ($DocRevID) {
  push @ErrorStack,"This document does not exist.";
}

EndPage(@ErrorStack);

print "<p><center><b>";

if ($DelVersion) {
  print "You are going to delete just this one version of this document. ".
        "If you want to delete all versions, don't enter a version number. ".
        "To delete this version, you must supply the administrator username and password:";
} else {
  print "To delete all versions of this document, you must supply the administrator username and password:";
}
print "</b>";

print $query -> start_form('POST',$DeleteDocument);
&AdministratorPassword;
print $query -> hidden(-name => 'docid',    -default => $DocumentID);
if ($DelVersion) {
  print $query -> hidden(-name => 'version',    -default => $DelVersion);
}
print "<b> </b>";
print $query -> submit (-value => "Delete Document");
print $query -> end_form;

print "</center><p>";

&PrintRevisionInfo($DocRevID,1);

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
