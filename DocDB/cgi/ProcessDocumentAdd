#! /usr/bin/env perl

use lib ".";

#
#        Name: ProcessDocumentAdd
# Description: Receives the output of DocumentAddForm and creates or updates the document
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "AuthorSQL.pm";
require "TopicSQL.pm";
require "SecuritySQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "SignoffSQL.pm";
require "MiscSQL.pm";
require "FSUtilities.pm";
require "FileUtilities.pm";
require "TopicUtilities.pm";
require "WebUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";

require "Security.pm";
require "Scripts.pm";

require "DocumentHTML.pm";
require "TopicHTML.pm";
require "SecurityHTML.pm";

if ($MailInstalled) {
  require "MailNotification.pm";
}

#print STDERR "Doing new CGI.\n";
$query = new CGI;  # Global for subroutines
# This line can crash and I'm not sure I can do anything about it. One way to force it to happen is to supply a
# directory name instead of a file. The error is "CGI.pm: Server closed socket during multipart read (client aborted?)."
# It's possible that perl 5.6.1 and CGI.pm from there fixes this.
#print STDERR "Did new CGI.\n";
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

GetTopics();
GetJournals();
GetSecurityGroups();

### Set up, give user initial information

my $Untaint = CGI::Untaint -> new($query -> Vars);

my $Mode = $Untaint -> extract(-as_printable => "mode") || "";
$mode = $Mode; #FIXME: Remove when not needed

print $query -> header( -charset => $HTTP_ENCODING );
if ($Mode eq "reserve") {
  &DocDBHeader("$Project Document Reservation Results","Document Reservation Results",-scripts => ["PopUps"]);
} elsif ($Mode eq "add" || $Mode eq "clone") {
  &DocDBHeader("$Project Document Addition Results","Document Addition Results",-scripts => ["PopUps"]);
} elsif ($Mode eq "update" || $Mode eq "updatedb") {
  &DocDBHeader("$Project Document Modification Results","Document Modification Results",-scripts => ["PopUps"]);
}

### Pull info out of parameters into local variables

# "Hidden" things

my $Archive = $Untaint -> extract(-as_printable => "archive") || "";
my $AuthorMode = $Untaint -> extract(-as_printable => "authormode") || "";
my $OldVersion = $Untaint -> extract(-as_printable => "oldversion") || "";
my $MaxFiles = $Untaint -> extract(-as_printable => "maxfiles") || "";
my $UniqueID = $Untaint -> extract(-as_printable => "uniqueid") || "";
my $DocumentID = $Untaint -> extract(-as_integer => "docid") || 0;
my $UserVersion = $Untaint -> extract(-as_integer => "version") || undef; # Special case to allow modifying version 0 (reservations)

# Text fields

my $Title = $Untaint -> extract(-as_safehtml => "title") || "";
my $Abstract = $Untaint -> extract(-as_safehtml => "abstract") || "";
my $PubInfo = $Untaint -> extract(-as_safehtml => "pubinfo") || "";
my $Keywords = $Untaint -> extract(-as_safehtml => "keywords") || "";
my $RevisionNote = $Untaint -> extract(-as_safehtml => "revisionnote") || "";
my $SignoffList = $Untaint -> extract(-as_safehtml => "signofflist") || "";

# Checkboxes

my $SubmitAgree = $Untaint -> extract(-as_printable => "submitagree") || "";
my $PreserveSigs = $Untaint -> extract(-as_printable => "preservesigs") || "";
my $LessFiles = $Untaint -> extract(-as_printable => "LessFiles") || "";

# ID numbers and numerical fields

my $DocTypeID = $Untaint -> extract(-as_integer => "doctype") || 0;
my $RequesterID = $Untaint -> extract(-as_integer => "requester") || 0;
my $SessionTalkID = $Untaint -> extract(-as_integer => "sessiontalkid") || 0;

my $Overdate = $Untaint -> extract(-as_safehtml => "overdate") || "";
my $Overday = $Untaint -> extract(-as_integer => "overday") || "";
my $Overmonth = $Untaint -> extract(-as_safehtml => "overmonth") || "";
my $Overyear = $Untaint -> extract(-as_integer => "overyear") || 0;
my $Overmin = $Untaint -> extract(-as_integer => "overmin") || 0;
my $Overhour = $Untaint -> extract(-as_integer => "overhour") || 0;

my @AuthorIDs = @{ $Untaint -> extract(-as_listofint => "authors") || undef };
my $AuthorManual = $Untaint -> extract(-as_safehtml => "authormanual") || "";

my @ViewGroupIDs = @{ $Untaint -> extract(-as_listofint => "security") || undef };

# Don't understand this but untaint of a list with the value "0" produces an empty list. Untaint as printable does not help.
my $ViewGroupRaw = $query -> param("security");
if ($ViewGroupRaw eq "0") {
  @ViewGroupIDs = (0);
}
my @ModifyGroupIDs = @{ $Untaint -> extract(-as_listofint => "modify") || undef };

# Journal Info

my @JournalIDs = @{ $Untaint -> extract(-as_listofint => "journal") || undef };
my @Volumes = @{ $Untaint -> extract(-as_listofwords => "volume") || undef };
my @Pages = @{ $Untaint -> extract(-as_listofwords => "page") || undef };

my @XRefs = split /,*\s+/,($Untaint -> extract(-as_safehtml => "xrefs") || ""); # Can be comma or space separated
my @EventIDs = @{ $Untaint -> extract(-as_listofint => "events") || undef };
my @RequestedTopicIDs = @{ $Untaint -> extract(-as_listofint => "topics") || undef };

# Zip/tarfile params

my $SingleUpload = $query -> param("single_upload"); # Filehandle
my $SingleHTTP = $Untaint -> extract(-as_printable => "single_http") || "";
my $MainFile = $Untaint -> extract(-as_printable => "mainfile") || "";
my $Description = $Untaint -> extract(-as_safehtml => "filedesc") || "";

if ($Archive eq "multi") {$Archive = "single";} # No real difference
if ($Mode eq "clone") {$Mode = "add"; $mode = "add";} # Same thing

# Fill in file hash
my $HttpUser = $Untaint -> extract(-as_printable => "http_user") || "";
my $HttpPass = $Untaint -> extract(-as_printable => "http_pass") || "";

my %Files = ();
my $NeedURLs      = 0;
my $AddNewFile    = 0;
my $NumberOfFiles = 0;
for (my $i = 1; $i<= $MaxFiles; ++$i) {
  my $Key = $i; # Probably something better later
  my $UploadI = $query -> param("upload$i");
  my $UrlI = $Untaint -> extract(-as_printable => "url$i") || "";
  my $CopyI = $Untaint -> extract(-as_printable => "copyfile$i") || "";
  my $FileIDI = $Untaint -> extract(-as_integer => "fileid$i") || 0;
  my $NewNameI = $Untaint -> extract(-as_safehtml => "newname$i") || ""; # FIXME: More restrictive?
  my $MainI = $Untaint -> extract(-as_printable => "main$i") || "";
  my $DescriptionI = $Untaint -> extract(-as_safehtml => "filedesc$i") || "";
  if ($UploadI) {
    $AddNewFile = 1;
    ++$NumberOfFiles;
    $Files{$Key}{File} = $UploadI;
  } elsif ($UrlI) {
    $NeedURLs = 1;
    $AddNewFile = 1;
    ++$NumberOfFiles;
    $Files{$Key}{URL}         = $UrlI;
    $Files{$Key}{User}        = $HttpUser;
    $Files{$Key}{Pass}        = $HttpPass;
    $Files{$Key}{NewFilename} = $NewNameI;
  } elsif ($CopyI) {
    ++$NumberOfFiles;
    $Files{$Key}{CopyFileID} = $FileIDI;
  } elsif ($Mode eq "updatedb") {
    ++$NumberOfFiles;
    $Files{$Key}{FileID} = $FileIDI;
    push @DebugStack,"Duplicating in slot $i, $Files{$Key}{FileID}";
  }

  if ($MainI) {
    $Files{$Key}{Main} = 1;
  } else {
    $Files{$Key}{Main} = 0;
  }

  $Files{$Key}{Description} = $DescriptionI;
}

# FIXME: Several places fetch information for the about-to-be-updated document
# FIXME: Look at consolidating this

my %Archive = ();
if ($Archive eq "archive") { # They uploaded a tar/zip file
  $AddNewFile = 1;
  $Archive{File} = $SingleUpload;
  $Archive{MainFile} = $MainFile;
  $Archive{Description} = $Description;
}

my $OrderAuthors = $FALSE;
if ($AuthorMode eq "field") {
  $OrderAuthors = $TRUE;
  @AuthorIDs = ProcessManualAuthors($AuthorManual);
}

if ($Overdate && $Overyear && $Overmonth && $Overday) {
  $SQL_NOW = "$Overyear-$ReverseAbrvMonth{$Overmonth}-$Overday $Overhour:$Overmin:00";
} else {
  my ($sec,$min,$hour,$day,$mon,$year) = localtime(time);
  $year += 1900;
  ++$mon;
  $SQL_NOW = "$year-$mon-$day $hour:$min:$sec";
}

if ($mode ne "add"    && $mode ne "reserve" &&
    $mode ne "update" && $mode ne "updatedb") {
  push @ErrorStack,"You accessed this page without  specifying a required
        parameter.  Don't manipulate hidden fields or  try to access this page
        directly. Mode is $mode.";
}
EndPage();

if      ($mode eq "add") {
  print "<p><h3>Here are the results of your attempt to add a document
                into the $Project document database:</h3><p>\n";
} elsif ($mode eq "reserve") {
  print "<p><h3>Here are the results of your attempt to reserve a document
                number in the $Project document database:</h3><p>\n";
} elsif ($mode eq "update" || $mode eq "updatedb") {
  print "<p><h3>Here are the results of your attempt to update a document
                in the $Project document database:</h3><p>\n";
}

### Check parameters for errors

unless (&CanCreate()) {
  push @ErrorStack,"You are not allowed to modify or create documents.";
}
if ($PreserveSigs && !CanPreserveSigs($mode)) {
  push @ErrorStack,'You are not authorized to preserve signatures when making this change. '.
                   'Members of another group may have this capability. Permissions to preserve signatures depend on '.
                   'the type of modification.';
}
unless ($RequesterID) {
  push @ErrorStack,"You must supply a submitter for this document.";
}
unless ($Title) {
  push @ErrorStack,"You must supply a title for this document.";
}

if ($mode eq "update" || $mode eq "updatedb") {
  if ($Preferences{Options}{Update}{RequireNote} && !$RevisionNote) {
    push @ErrorStack,"You must supply a note when updating this document.";
  }
}

if (@JournalIDs || @Volumes || @Pages) {
  my @TestJournalIDs = @JournalIDs;
  my @TestVolumes    = @Volumes;
  my @TestPages      = @Pages;
  foreach my $JournalID (@TestJournalIDs) {
    my $Volume = shift @TestVolumes;
    my $Page   = shift @TestPages;
    if (($JournalID || $Volume || $Page) && !($JournalID && ($Volume || $Page))) {
      push @ErrorStack,"Your reference $Journals{$JournalID}{Acronym}, vol. $Volume,
      pg. $Page must consist of a journal plus a volume, page number, or
      both.";
    }
  }
}

unless ($DocTypeID) {
  push @ErrorStack,"You must supply a document type for this document.";
}

if ($Mode eq "add" || $Mode eq "update") {
  unless ($Abstract) {
    push @ErrorStack,"You must supply an abstract for this document.";
  }
  unless ($AddNewFile) {
    push @ErrorStack,"You must supply a new or changed file for this document.
                      If you just want to change information about the
                      document, choose Update DB Info instead.";
  }
  if     ($SingleUpload && $SingleHTTP) {
    push @ErrorStack,"You may not specify both URL and file upload.";
  }
  if     (!$MainFile && $Archive eq "archive") {
    push @ErrorStack,"You must specify a main file in the archive.";
  }

  if ($NeedURLs) {
    my $TmpDir = &MakeTmpSubDir();
    %Files = &DownloadURLs(-tmpdir => $TmpDir, -files => \%Files);
  }
}

if ($Mode eq "update" && !$LessFiles) {
  FetchDocument($DocumentID);
  my $Version = $Documents{$DocumentID}{NVersions};
  my $DocRevID = FetchRevisionByDocumentAndVersion($DocumentID,$Version);
  my @FileIDs = FetchDocFiles($DocRevID);
  if (scalar(@FileIDs) > $NumberOfFiles) {
    push @ErrorStack,"You are attempting to create a new version with fewer
      files than the original. Either upload or copy the correct number of files
      or check the box confirming that you want to upload fewer files.";
  }
}

if ($Mode eq "update" || $Mode eq "updatedb") {
  unless ($DocumentID) {
    push @ErrorStack,"You must supply a document number to modify a document.";
  }
  unless (&CanModify($DocumentID)) {
    push @ErrorStack,"You are not allowed to modify this document.";
  }
}

if ($Preferences{Options}{SubmitAgree} && !$SubmitAgree) {
  push @ErrorStack,'You must check the box near with this statement: \n'.
                   $Preferences{Options}{SubmitAgree}.
                   '\nto submit the document.';
}

### Final checks

if ($UseSignoffs && $SignoffList && !$PreserveSigs) {
  my @SignoffIDs = ProcessSignoffList($SignoffList);
}

my @TopicIDs = ();

foreach my $TopicID (@RequestedTopicIDs) {
  if (scalar(@{$TopicProvenance{$TopicID}}) < $Preferences{Topics}{MinLevel}{Document}) {
    push @WarnStack,"Topic ".TopicLink({-topicid => $TopicID})." not added to this document. Topic is too high-level.";
  } else {
    push @TopicIDs,$TopicID;
  }
}

if ($mode eq "add" || $mode eq "update") {
  unless (@TopicIDs) {
    push @ErrorStack,"You must supply at least one valid topic for this document.";
  }
}

@securities  = @ViewGroupIDs;
if ($EnhancedSecurity) {
  @ModifyGroups = @ModifyGroupIDs;
}

if ($mode eq "add" || $mode eq "update" || $mode eq "updatedb") {
  unless (@AuthorIDs) {
    push @ErrorStack,"You must supply at least one author for this document.";
  }
}

if ($#securities > 0) {
  foreach my $GroupID (@securities) {
    if ($GroupID == 0) {
      push @ErrorStack,"You selected \"Public\" and another form of security. ".
                    "You may only select \"Public\" by itself.";
    }
  }
}

my $ViewCheck = "create"; # Create/view are the same, check for more restrictive
if ($EnhancedSecurity) {
  $ViewCheck = "view";
  unless (@ModifyGroups) {
    push @ErrorStack,"You must select at least one group which is allowed to
                      modify the document.";
  }
}

foreach my $GroupID (@securities) {
  unless ($GroupID) {next;} # Don't check for public
  unless (GroupCan({ -groupid => $GroupID, -action => $ViewCheck }) ) {
    push @WarnStack,"A selected group".
         " is not currently allowed to view documents. If this changes,".
         " this document will be viewable by that group.";
  }
}

foreach my $GroupID (@ModifyGroups) {
  unless ($GroupID) {next;} # Don't check for public
  unless (GroupCan({ -groupid => $GroupID, -action => "create" }) ) {
    push @WarnStack,"A selected group".
         " is not currently allowed to create or modify documents. If this changes,".
         " this document will be modifiable by that group.";
  }
}

my $UniqueSelect = $dbh -> prepare("select DocumentID from Document where DocHash=?");
$UniqueSelect -> execute($UniqueID);
my ($ExistingDocID) = $UniqueSelect -> fetchrow_array;
if ($ExistingDocID) {
  push @ErrorStack,"You seem to be attempting to upload a duplicate of
        document $ExistingDocID. If this is not correct, please reload the
        previous page or <a href=\"$DocumentAddForm\">try again</a>. If you
        were really trying to enter two similar documents hitting the \"Back\"
        button and  then \"Reload\" and \"Submit\" may save the parameters you
        entered but create a new unique key for DocDB.";
}

EndPage();

### Make entry in DocumentDatabase or get document ID
### FIXME: Should be able to move all this into an enhanced AddDocument

my $documentID;
if ($mode eq "reserve" || $mode eq "add") {
  $documentID = &InsertDocument(-requesterid => $RequesterID, -datetime => $SQL_NOW, -dochash => $UniqueID);
} else {
  $documentID = $DocumentID;
}

### Set version number. For reservations, it is "0", for new documents "1". For
### updates, increment by one, and for DB info updates, either the latest
### version or the one being updated

my $version;
my $OldRevID;
if      ($mode eq "reserve") {
  $version   = 0;
} elsif ($mode eq "add") {
  $version   = 1;
} elsif ($mode eq "update") {
  &FetchDocument($documentID);
  $OldRevID = FetchRevisionByDocumentAndVersion($documentID,$Documents{$documentID}{NVersions});
  push @DebugStack, "Set OldRevID to $OldRevID in update mode";
  $version   = $Documents{$documentID}{NVersions} + 1;
} elsif ($mode eq "updatedb") {
  &FetchDocument($documentID);
  if  (defined $UserVersion) {
    $version = $UserVersion;
  } else {
    $version = $Documents{$documentID}{NVersions};
  }
  if ($version != $Documents{$documentID}{NVersions}) {
    push @WarnStack,"You have updated an old version of a document. Hope this
    is what you wanted to do.";
  }
  $OldRevID = FetchRevisionByDocumentAndVersion($documentID,$version);
  push @DebugStack, "Set OldRevID to $OldRevID in update metadata mode";

}

if ($mode eq "updatedb") { # New Document revision replaces old. Fetch
                           # old DocumentRevision and mark it obsolete
  my $ObsoleteRevision = $dbh -> prepare("update DocumentRevision set Obsolete=1 where DocRevID=?");
  $ObsoleteRevision -> execute($OldRevID);
}

### Add entry to Document Revision

my $DocRevID = &InsertRevision(
                 -docid       => $documentID,  -doctypeid => $DocTypeID,
                 -submitterid => $RequesterID, -title     => $Title,
                 -pubinfo     => $PubInfo,     -abstract  => $Abstract,
                 -version     => $version,     -datetime  => $SQL_NOW,
                 -keywords    => $Keywords,    -note      => $RevisionNote);

### Add reference information if it exists

if (@JournalIDs || @Volumes || @Pages) {
  my $ReferenceInsert  = $dbh -> prepare(
    "insert into RevisionReference (ReferenceID,DocRevID,JournalID,Volume,Page) ".
    "values (0,?,?,?,?)");
  foreach my $JournalID (@JournalIDs) {
    my $Volume = shift @Volumes;
    my $Page   = shift @Pages;
    if ($JournalID) { # Can delete references too.
      $ReferenceInsert -> execute($DocRevID,$JournalID,$Volume,$Page);
    }
  }
}

### Add Cross-References

if (@XRefs) {
  require "XRefSQL.pm";
  &InsertXRefs(-docrevid => $DocRevID, -documents => \@XRefs);
}

### Add to authors, topics and securities

my $Count;
$Count = InsertAuthors( -docrevid  => $DocRevID, -authorids => \@AuthorIDs, -order => $OrderAuthors);
$Count = InsertTopics(  -docrevid  => $DocRevID, -topicids  => \@TopicIDs);
$Count = InsertSecurity(-docrevid  => $DocRevID,
                        -viewids   => \@securities,
                        -modifyids => \@ModifyGroups);

### Add events
if (@EventIDs) {
  require "MeetingSQL.pm";
  $Count = &InsertRevisionEvents(-docrevid => $DocRevID, -eventids => \@EventIDs);
}
### Add link to SessionTalk

if ($SessionTalkID) {
  my $SessionTalkUpdate = $dbh -> prepare("update SessionTalk set DocumentID=?,Confirmed=1 where SessionTalkID=?");
  $SessionTalkUpdate -> execute($documentID,$SessionTalkID);
}

### Add Signoffs

if ($UseSignoffs && $SignoffList && !$PreserveSigs) {
  my  @SignoffIDs = ProcessSignoffList($SignoffList);
  if (@SignoffIDs) {
    InsertSignoffList($DocRevID,@SignoffIDs);
  }
} elsif ($PreserveSigs && $OldRevID) {
  push @WarnStack,"The document's signatures have been identically preserved. ".
                  "Any changes in the list have been ignored.";
  CopyRevisionSignoffs($OldRevID,$DocRevID,$TRUE);
}

### Deal with files

my @FileIDs;

if ($mode eq "updatedb") { # Copy DocumentFile entries
  &ProtectDirectory($documentID,$version,@securities); # Redo security
  @FileIDs = &AddFiles(-docrevid => $DocRevID, -files => \%Files, -oldversion => $OldVersion);
  &ProtectDirectory($documentID,$version,@securities); # Redo security again
}

if ($mode eq "add" || $mode eq "update") { # We're adding new files
  my $NewDir = &MakeDirectory($documentID,$version);
  &ProtectDirectory($documentID,$version,@securities);
  if ($Archive eq "single") { # They uploaded individual files
    @FileIDs = &AddFiles(-docrevid => $DocRevID, -files => \%Files, -oldversion => $OldVersion);
  } elsif ($Archive eq "archive") { # They uploaded a tar/zip file
    @FileIDs = &AddArchive(-docrevid => $DocRevID, -archive => \%Archive);
  }
  &ProtectDirectory($documentID,$version,@securities); # Redo security again
}

### If we had any warnings print them out now

WarnPage();

if ($mode = "updatedb") { # Local DB not in sync, clear it
  %DocRevIDs    = ();
  %DocRevisions = ();
  %Documents    = ();
  @DocumentIDs  = ();
}

# Output feedback to the user

$full_docid = FullDocumentID($documentID);
$DocRevID   = FetchRevisionByDocumentAndVersion($documentID,$version);

unless ($DocRevID) {
  print "This document does not exist.<p>\n";
  exit;
  print $query->end_html;
}

print "You were successful. Your Document ID is <b>$full_docid, version
       $version</b>.\n";

print "You can access the latest version of this document with this link: ";
print DocumentLink(-docid => $documentID, -noversion => $TRUE);
print ".<br/>\n";

print "<br/>Your entry was created with the following information: <p><hr><p>\n";

PrintRevisionInfo($DocRevID);

# Send out e-mail to people watching this document and people who have to sign

if ($MailInstalled) {
  MailNotices(-docrevid => $DocRevID, -type => $Mode);
}

if ($UseSignoffs) {
  ClearSignatures();
  unless ($PreserveSigs) {
    NotifySignees($DocRevID);
  }
}

$EndTime  = new Benchmark;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
