#! /usr/bin/env perl

use lib ".";

#        Name: $RCSfile$
# Description: This script is called by DeleteConfirm to actually delete
#              the requested document, all associated entries in the DB,
#              and the actual files as well.
#
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "FSUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

my $DocumentID = $Untaint -> extract(-as_typedint => "docid") || 0;
my $Version = $Untaint -> extract(-as_typedint => "version") || 0;
my $Password = $Untaint -> extract(-as_printable => "password") || "";
my $Username = $Untaint -> extract(-as_printable => "admuser") || "";

@ErrorStack = ();

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,"Unable to connect to the database. Check the password.";
}

print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("Deleting Document $DocumentID");

EndPage(@ErrorStack);

unless ($DocumentID) {
  push @ErrorStack,"You are must supply a document number to delete.";
}
unless (&CanAdminister) {
  push @ErrorStack,"You must be logged in as the administrator to delete
  documents";
}
EndPage(@ErrorStack);

# Get directory and pull off version number

if ($Version) {
  $Directory = GetDirectory($DocumentID, $Version);
} else {
  $Directory = GetDirectory($DocumentID);
  chop $Directory; chop $Directory; chop $Directory; chop $Directory; # 3 numbers plus /
}

my $revision_list   = $dbh -> prepare("select DocRevID from DocumentRevision where DocumentID=?");
my $revision_find   = $dbh -> prepare("select DocRevID from DocumentRevision where DocumentID=? and VersionNumber=?");
my $document_delete = $dbh -> prepare("delete from Document         where DocumentID=?");
my $revision_delete = $dbh -> prepare("delete from DocumentRevision where DocumentID=?");
my $single_delete   = $dbh -> prepare("delete from DocumentRevision where DocRevID=?");
my $author_delete   = $dbh -> prepare("delete from RevisionAuthor   where DocRevID=?");
my $topic_delete    = $dbh -> prepare("delete from RevisionTopic    where DocRevID=?");
my $file_delete     = $dbh -> prepare("delete from DocumentFile     where DocRevID=?");
my $security_delete = $dbh -> prepare("delete from RevisionSecurity where DocRevID=?");

# Find all revisions associated with document

my %Revision = ();
if ($Version) {
  $revision_find -> execute($DocumentID, $Version);
  $revision_find -> bind_columns(undef, \($DocRevID));
  while ($revision_find -> fetch) {
    $Revision{$DocRevID}{DocRevID} = $DocRevID;
  }
} else {
  $revision_list -> execute($DocumentID);
  $revision_list -> bind_columns(undef, \($DocRevID));
  while ($revision_list -> fetch) {
    $Revision{$DocRevID}{DocRevID} = $DocRevID;
  }
}

my @Revisions = keys %Revision;
unless (@Revisions) {
  print "Document $DocumentID does not exist.\n";
  exit;
}
push @DebugStack, "DocRevIDs to delete: ".join ', ',@Revisions;

# Delete stuff from files and linking tables

foreach $RevisionID (@Revisions) {
  push @DebugStack, "Deleting revision $RevisionID";
  $author_delete   -> execute($RevisionID);
  $topic_delete    -> execute($RevisionID);
  $file_delete     -> execute($RevisionID);
  $security_delete -> execute($RevisionID);
  $single_delete   -> execute($RevisionID);
}

# Delete revisions and document for full document delete

unless ($Version) {
  push @DebugStack, "Deleting document $DocumentID";
  $document_delete -> execute($DocumentID);
  $revision_delete -> execute($DocumentID);
}

# Delete stuff from file system

$command = "rm -rf $Directory/*";
push @DebugStack, "Executing $command";
system ($command);

if ($Version) {
  print "<b>Document version $DocumentID-v$Version has been deleted.</b><p>";
} else {
  print "<b>Document $DocumentID has been deleted.</b><p>";
}

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);


exit;
