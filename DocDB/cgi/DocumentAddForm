#! /usr/bin/env perl

use lib ".";

#
#        Name: DocumentAddForm
# Description: The main form to add or modify documents or metadata
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "Cookies.pm";
require "Scripts.pm";
require "Sorts.pm";
require "Messages.pm";

require "AuthorSQL.pm";
require "DocumentSQL.pm";
require "MeetingSQL.pm";
require "MiscSQL.pm";
require "RevisionSQL.pm";
require "SecuritySQL.pm";
require "TopicSQL.pm";

require "ResponseElements.pm";
require "FormElements.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "Utilities.pm";
require "Defaults.pm";
require "Security.pm";
require "XRefUtilities.pm";
require "AuthorUtilities.pm";
require "SignoffUtilities.pm";

require "FileHTML.pm";
require "JournalHTML.pm";
require "KeywordHTML.pm";
require "MeetingHTML.pm";
require "RevisionHTML.pm";
require "SecurityHTML.pm";
require "SignoffHTML.pm";
require "TalkHTML.pm";
require "TopicHTML.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

@ErrorStack = ();
@WarnStack = ();

&GetAuthors;
&GetTopics;
&GetSecurityGroups;
&GetDocTypes;
&GetPrefsCookie;

my $Untaint = CGI::Untaint -> new($query -> Vars);

my $DocumentID = $Untaint -> extract(-as_integer => "docid") || 0;
my $ConferenceID = $Untaint -> extract(-as_integer => "conferenceid") || undef;
my $SessionID = $Untaint -> extract(-as_integer => "sessionid") || undef;
my $Version = $Untaint -> extract(-as_integer => "version") || undef;
my $InputVersion = $Untaint -> extract(-as_integer => "version") || undef;
my @PreTopics = @{ $Untaint -> extract(-as_listofint => "pretopic") || undef };
   $mode = $Untaint -> extract(-as_safehtml => "mode") || "";  # FIXME: Can't be "my" since used in subroutines
my $Clone;
my $Quick = $Untaint -> extract(-as_safehtml => "quick") || "";

my $QuickClass = " QuickEntryShow";
if ($Quick) {
  $QuickClass = " QuickEntryHide";
}

if ($mode ne "add"    && $mode ne "reserve" &&
    $mode ne "update" && $mode ne "updatedb" && $mode ne "clone") {
  $mode = "add";
}

SetUploadMethod();
SetDateOverride();
SetAuthorMode();
SetTopicMode();

print $query -> header( -charset => $HTTP_ENCODING );
my @Scripts = ("PopUps","InsertRevisionNote","AuthorMethodDisplay","QuickShow","ClearFile","CheckUncheckAll",);

if ($TopicMode eq "tree") {
  push @Scripts,"TreeChooser";
}
push @Scripts,"jquery/jquery-1.4.2.min","jquery/jquery.elastic","jquery/jquery.validate.pack";
my @JQueryElements = ("elastic","validate");

if ($AuthorMode eq "active") {
  push @Scripts,"jquery/jquery.autocomplete.pack","AuthorSearch";
  push @JQueryElements,"autocomplete";
}

push @Scripts,"JQueryReady";

if      ($mode eq "add" || $mode eq "clone") {
  DocDBHeader("$Project Document Addition",   "Document Addition",    -scripts => \@Scripts, -jqueryelements => \ @JQueryElements);
} elsif ($mode eq "reserve") {
  DocDBHeader("$Project Document Reservation","Document Reservation", -scripts => \@Scripts, -jqueryelements => \ @JQueryElements);
} elsif ($mode eq "update" || $mode eq "updatedb") {
  DocDBHeader("$Project Document Update",     "Document Update",      -scripts => \@Scripts, -jqueryelements => \ @JQueryElements);
}

unless (CanCreate()) {
  push @ErrorStack,"You are not allowed to modify or create documents.";
}
if ($mode eq "update" || $mode eq "updatedb" || $mode eq "clone") {
  unless ($DocumentID) {
    push @ErrorStack,"You must supply a document number to modify or clone a document.";
  }
}
if ($mode eq "update" || $mode eq "add") {
  if ($Archive eq "archive" && $NumberUploads > 1) {
    push @ErrorStack,"You cannot upload more than one archive.";
  }
}

EndPage(@ErrorStack);

# Set required/optional information

my %RequiredEntries = ();

$RequiredEntries{Title}     = 1;   # Note that this isn't completely
$RequiredEntries{Abstract}  = 1;   # functional. Some of these variables
$RequiredEntries{Keyword}   = 0;   # aren't passed, and of those that are some may be ignored.
if ($Preferences{Options}{Update}{RequireNote} && ($mode eq "update" || $mode eq "updatedb")){
  $RequiredEntries{Note} = 1;
}
$RequiredEntries{File}      = 1;   #
$RequiredEntries{Type}      = 1;   # After the defaults are set a hook could
$RequiredEntries{Requester} = 1;   # be installed to change these based on
$RequiredEntries{Author}    = 1;   # site policy. (And then enforced in
$RequiredEntries{Security}  = 0;   # ProcessDocumentAdd).
$RequiredEntries{Modify}    = 0;
$RequiredEntries{Topic}     = 1;
$RequiredEntries{Reference} = 0;
$RequiredEntries{PubInfo}   = 0;
$RequiredEntries{Signoff}   = 0;

if ($mode eq "reserve") {
  $RequiredEntries{Abstract}  = 0;
}

my $DocRevID;

if ($mode eq "update" || $mode eq "updatedb") {
  &FetchDocument($DocumentID);
  unless (&CanModify($DocumentID)) {
    push @ErrorStack,"You are not allowed to modify this document.";
  }
}
if ($mode eq "clone") {
  FetchDocument($DocumentID);
}

if ($mode eq "updatedb") {
  unless (defined $Version) {
    $Version = $Documents{$DocumentID}{NVersions};
  }
  if ($Version != $Documents{$DocumentID}{NVersions}) {
    push @WarnStack,"You are about to update an old version of this document.";
  }
}

if ($mode eq "update" || $mode eq "clone") {
  $Version = $Documents{$DocumentID}{NVersions};
}

# FIXME: What other ones needn't be global?
my @AuthorDefaults   = ();
my @EventDefaults    = ();
my @ModifyDefaults   = ();
my @SecurityDefaults = ();
my @TopicDefaults    = ();
my ($AuthorListOrdered);
my ($DocTypeIDDefault,$RequesterDefault,$RevisionNoteDefault,$SignoffsDefault,
    $XRefDefault);

if ($mode eq "update" || $mode eq "updatedb" || $mode eq "clone") { # Need to read in last version values and update
  $DocRevID            = FetchRevisionByDocumentAndVersion($DocumentID,$Version);
  $TitleDefault        = $DocRevisions{$DocRevID}{Title};
  $PubInfoDefault      = $DocRevisions{$DocRevID}{PUBINFO};
  $AbstractDefault     = $DocRevisions{$DocRevID}{Abstract};
  if (not $Preferences{Options}{Update}{RequireSubmitter}) {
    $RequesterDefault  = $DocRevisions{$DocRevID}{Submitter};
  }
  $KeywordsDefault     = $DocRevisions{$DocRevID}{Keywords};
  $RevisionNoteDefault = $DocRevisions{$DocRevID}{Note};
  $DocTypeIDDefault    = $DocRevisions{$DocRevID}{DocTypeID};
  @SecurityDefaults    = GetRevisionSecurityGroups($DocRevID);
  unless (@SecurityDefaults) {
    @SecurityDefaults = (0);
  }
  my @AuthorRevIDs     = GetRevisionAuthors($DocRevID);
     @AuthorRevIDs     = sort AuthorRevIDsByOrder @AuthorRevIDs;
  $AuthorListOrdered   = IsAuthorListOrdered({     -authorrevids => \@AuthorRevIDs, });
  @AuthorDefaults      = AuthorRevIDsToAuthorIDs({ -authorrevids => \@AuthorRevIDs, });
  @TopicDefaults       = GetRevisionTopics({ -docrevid => $DocRevID });
  @EventDefaults       = GetRevisionEvents($DocRevID);
  @ReferenceDefaults   = FetchReferencesByRevision($DocRevID);
  $XRefDefault         = SetXRefDefault($DocRevID);
  if ($UseSignoffs) {
    require "SignoffUtilities.pm";
    $SignoffDefault     = BuildSignoffDefault($DocRevID);
  }
} else {
  if ($UserPreferences{AuthorID}) {
    @AuthorDefaults   = ($UserPreferences{AuthorID});
    $RequesterDefault =  $UserPreferences{AuthorID};
  }

  push @TopicDefaults,@PreTopics;

  if ($DefaultPublicAccess) {
    @SecurityDefaults = (0);
  } else {
    @SecurityDefaults = FindUsersGroups();
  }
}

@TopicDefaults = Unique(@TopicDefaults); # Make sure this list is unique

if ($EnhancedSecurity) {
  @ModifyDefaults  = &GetRevisionModifyGroups($DocRevID);
  unless (@ModifyDefaults) {
    @ModifyDefaults  = @SecurityDefaults;
  }
  unless (@ModifyDefaults) { # A public doc with no list of who can modify
    $AllCanModifyPublic = 1;
  }
}

# Warn the user if they are about to modify a controlled document
my ($SigStatus) = RevisionStatus($DocRevID);
if ($UseSignoffs && ($mode eq "update" || $mode eq "updatedb")) {
  unless ($SigStatus eq "Unmanaged") {
    if (CanPreserveSigs($mode)) {
      push @WarnStack, $Msg_WarnModManagedHack;
    } else {
      push @WarnStack, $Msg_WarnModManaged;
    }
  }
}

# Find SessionTalks that the user might choose and display

my @OpenSessionTalkIDs = ();

# Explicit conference and session checks for things that aren't topics
# FIXME: Look into modification too

if ($mode eq "add" && ($SessionID||$ConferenceID)) {
  require "TalkSQL.pm";
  require "MeetingSQL.pm";

  my @CheckSessionTalkIDs = ();

  if ($ConferenceID) {
    @CheckSessionTalkIDs = &FetchSessionTalksByConferenceID($ConferenceID);
  } elsif ($SessionID) { # Build list for SessionID
    @CheckSessionTalkIDs = &FetchSessionTalksBySessionID($SessionID);
    &FetchSessionByID($SessionID);
    $ConferenceID = $Sessions{$SessionID}{ConferenceID};
  }
  &FetchConferenceByConferenceID($ConferenceID);
  push @EventDefaults,$ConferenceID;

  # Check list of SessionTalks

  foreach my $SessionTalkID (@CheckSessionTalkIDs) {
    unless ($SessionTalks{$SessionTalkID}{Confirmed}) {
      push @OpenSessionTalkIDs,$SessionTalkID;
    }
  }
}

&EndPage(@ErrorStack); # The user may have made mistakes, warn and exit

&SetFileOptions($DocRevID);

# Clone is add, just with no document #

if ($mode eq "clone") {
  $mode       = "add";
  $DocumentID = 0;
  $Version    = 0;
  $Clone      = $TRUE;
}

print $query -> start_multipart_form('POST',$ProcessDocumentAdd,'id="documentadd" name="documentadd"');
print "<div>\n";
print $query -> hidden(-name => 'mode',      -default => $mode);
print $query -> hidden(-name => 'upload',    -default => 'file');
print $query -> hidden(-name => 'archive',   -default => 'single');
print $query -> hidden(-name => 'docid',     -default => $DocumentID);
print $query -> hidden(-name => 'oldversion',-default => $Version);

# Generate unique ID to disallow multiple posting
srand (time ^ $$ ^ unpack "%32L*", `ps -eaf`);
my $UniqueID = time."-".(int rand (2**31-1));
print $query -> hidden(-name => 'uniqueid',  -default => $UniqueID);

if ($mode eq "updatedb") {
  if (defined $InputVersion) {
    print $query -> hidden(-name => 'version',   -default => $Version);
  }
}

if ($Overdate eq "Yes") {
  print $query -> hidden(-name => 'overdate',-default => 'Yes');
} else {
  print $query -> hidden(-name => 'overdate',-default => '');
}

print $query -> hidden(-name => 'special',-default => '');
print "</div>\n";

WarnPage(@WarnStack);

print "<table class=\"CenteredTable HighPaddedTable\">\n";

print "<tr>\n";
print "<td colspan=\"4\">\n";
if ($mode eq "add") {
  print "<h4>You are adding a new document to DocDB. ";
} elsif ($mode eq "reserve") {
  print "<h4>You are reserving a new document document number in
             DocDB. ";
} elsif ($mode eq "update") {
  $documentName = &FullDocumentID($DocumentID);
  print "<h4>You are updating $documentName. ";
} elsif ($mode eq "updatedb") {
  $documentName = &FullDocumentID($DocumentID,$Version);
  print "<h4>You are updating the metadata for $documentName. ";
}

print "Required fields are marked with an asterisk (*). ";
if ($Quick) {
  print "<a href=\"Javascript:unhideQuick();\">(Show all fields)</a>\n";
}
print "</h4>\n";

print "</td>\n";
print "</tr>\n";

### Title, abstract, and keywords

if (@OpenSessionTalkIDs) {
  print "<tr>\n";
  print "<td colspan=\"4\">\n"; SessionTalkPulldown(@OpenSessionTalkIDs);    print "</td>\n";
  print "</tr>\n";
}

print "<tr>\n";
print "<td colspan=\"4\">\n";
 &TitleBox(-required => $RequiredEntries{Title});
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=\"4\">\n";
 &AbstractBox(-required => $RequiredEntries{Abstract});
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=\"4\">\n";
 &KeywordsBox(-required => $RequiredEntries{Keyword});
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td colspan=\"4\">\n";
if ($mode eq "update") {
  &RevisionNoteBox(-jsinsert => $RevisionNoteDefault,
                   -required => $RequiredEntries{Note});
} else {
  &RevisionNoteBox(-default  => $RevisionNoteDefault,
                   -required => $RequiredEntries{Note});
}
print "</td>\n";
print "</tr>\n";

### Files

if ($mode eq "add" || $mode eq "update") {
  my $CopyOption = ($mode eq "update");

  print "<tr><td colspan=\"4\">\n";
  if ($Archive eq "archive") {
    &ArchiveUploadBox(-required => $RequiredEntries{File});
  } else {
    &FileUploadBox(-allowcopy => $CopyOption, -type => $Upload, -docrevid => $DocRevID,
                   -addfiles => 1, -required  => $RequiredEntries{File}, -fileids => \@FileIDs);
  }
  print "<br/>Make sure you supply a format everyone can view (e.g. PDF) along
  with source formats.<br/>\n";
  print "</td></tr>";
} elsif ($mode eq "updatedb" && $Version) { # v0 can't have files
  print "<tr><td colspan=\"4\">\n";
  &FileUploadBox(-desconly => $TRUE, -docrevid => $DocRevID,
                 -fileids  => \@FileIDs);
  print "</td></tr>";
}

### Document type and date override (if present)

print "<tr>\n";
print "<td colspan=\"2\">\n";
&DocTypeButtons(-required => $RequiredEntries{Type},
                -default  => $DocTypeIDDefault);
print "</td>\n";

if ($Overdate eq "Yes") {
  print "<td colspan=\"2\">\n";
  &DateTimePullDown;
  print "</td>\n";
}
print "</tr>\n";

### Requester, Authors, and security

if ($UserValidation eq "certificate") {
  print '<tr class="wListUsers">'."\n";
} else {
  print "<tr>\n";
}
push @DebugStack,"AuthorMode $AuthorMode";
print "<td>\n";

if ($AuthorMode eq "active") {
  print RequesterActiveSearch({-required => $RequiredEntries{Requester}, -helplink => "requester",
               -helptext => "Submitter",                 -name     => "requester",
               -default  => $RequesterDefault, });
} elsif ($AuthorMode eq "list" || $AuthorMode eq "field") {
  AuthorScroll(-required => $RequiredEntries{Requester}, -helplink => "requester",
               -helptext => "Submitter",                 -name     => "requester",
               -default  => [$RequesterDefault], );
}
print "</td>\n";

my ($AuthorScrollDisplay,$AuthorTextDisplay);
if ($AuthorListOrdered) {
  $AuthorMode = "field";
}
if ($AuthorMode eq "list" || $AuthorMode eq "active") {
   $AuthorTextDisplay   = ' style="display: none;"';
} elsif ($AuthorMode eq "field") {
   $AuthorScrollDisplay = ' style="display: none;"';
}

if ($AuthorMode eq "active") {
  $ScrollExtraText = "<a href=\"Javascript:author_method_choose_text(\'text\');\">(Text w/ order)</a>";
  $TextExtraText   = "<a href=\"Javascript:author_method_choose_text(\'active\');\">(Active search)</a>";

  print "<td id=\"AuthorActiveSearch\"$AuthorScrollDisplay>\n";
  print $query -> hidden(-name => 'authormode', -default => $AuthorMode);
  print AuthorActiveSearch({-required  => $RequiredEntries{Author}, -helplink => "authors",
              -defaultauthorids   => \@AuthorDefaults,
              -extratext => $ScrollExtraText,});
  print "</td>\n";
  print "<td id=\"AuthorText\"$AuthorTextDisplay>\n";
  AuthorTextEntry({ -required => $RequiredEntries{Author}, -extratext => $TextExtraText,
                    -default  => \@AuthorDefaults, });
  print "</td>\n";

} else {
  $ScrollExtraText = "<a href=\"Javascript:author_method_choose(\'text\');\">(Text w/ order)</a>";
  $TextExtraText   = "<a href=\"Javascript:author_method_choose(\'scroll\');\">(Select from list)</a>";

  print "<td id=\"AuthorScroll\"$AuthorScrollDisplay>\n";
  print $query -> hidden(-name => 'authormode', -default => $AuthorMode);
  AuthorScroll(-required  => $RequiredEntries{Author}, -helplink => "authors",
              -default   => \@AuthorDefaults,         -multiple => "true",
              -extratext => $ScrollExtraText,);
  print "</td>\n";

  print "<td id=\"AuthorText\"$AuthorTextDisplay>\n";
  AuthorTextEntry({ -required => $RequiredEntries{Author}, -extratext => $TextExtraText,
                    -default  => \@AuthorDefaults, });
  print "</td>\n";
}

print "<td>\n";
my $SecurityText;
if ($EnhancedSecurity) {
  $SecurityText = "Can View";
} else {
  $SecurityText = "Security";
}
SecurityScroll(-addpublic => 'true',
               -name      => 'security',
               -helplink  => 'security',
               -helptext  => $SecurityText,
               -multiple  => $TRUE,
               -permission=> 'CanView',
               -default   => \@SecurityDefaults);
print "</td>\n";
if ($EnhancedSecurity) {
  print "<td>\n";
  SecurityScroll(-name      => 'modify',
                 -helplink  => 'modifygroups',
                 -helptext  => 'Can Modify',
                 -multiple  => $TRUE,
                 -permission=> 'CanCreate',
                 -default   => \@ModifyDefaults);
  print "</td>\n";
}
print "</tr>\n";

if ($UserValidation eq "certificate") {
  print '<tr class="ListUsers"><td colspan="2">&nbsp</td>';
  print '<td colspan="2"><a href="'.$ListGroupUsers.'">List users in groups</a>';
  print "</td></tr>\n";
}

### Topics

if ($TopicMode eq "single") {
  print "<tr><td colspan=\"4\">\n";
  TopicScroll({ -required => $RequiredEntries{Topic}, -size     => 20 ,
                -default  => \@TopicDefaults,         -multiple => $TRUE,
                -minlevel => $Preferences{Topics}{MinLevel}{Document}, });
} elsif ($TopicMode eq "multi") {
  print "<tr><td colspan=\"4\" id=\"TopicScrollTable\">\n";
  TopicScrollTable({ -required => $RequiredEntries{Topic},
                     -default  => \@TopicDefaults,
                     -multiple => $TRUE,
                     -minlevel => $Preferences{Topics}{MinLevel}{Document}, });
} elsif ($TopicMode eq "tree") {
  print "<tr><td colspan=\"4\" id=\"TopicTreeSelector\">\n";
  my @RootTopicIDs = sort TopicByAlpha AllRootTopics();
  print TopicListWithChildren({ -topicids        => \@RootTopicIDs,
                                -defaulttopicids => \@TopicDefaults,
                                -chooser         => $TRUE });
}
print "</td></tr>\n";

if ($Preferences{Options}{SubmitAgree}) {
  print '<tr><td colspan="4">';
  print $Preferences{Options}{SubmitAgree};
  print $query -> checkbox(-name  => 'submitagree', -label => "");
  print "</td></tr>\n";
}

### Submit button prior to optional information

print "<tr><td colspan=\"4\" class=\"SubmitCell$QuickClass\">\n";
if      ($mode eq "add") {
  print $query -> submit (-value => "Submit document");
} elsif ($mode eq "reserve") {
  print $query -> submit (-value => "Request document ID");
} elsif ($mode eq "update" || $mode eq "updatedb") {
  print $query -> submit (-value => "Update document");
}
print "</td></tr>\n";

### Events

print "<tr class=\"$QuickClass\"><td colspan=\"4\">\n";
 EventSelect( {-required => $FALSE,          -format   => "full",
               -default  => \@EventDefaults, -multiple => $TRUE} );
print "</td></tr>\n";

### Cross-references to other documents

print "<tr><td colspan=\"4\">\n";
TextField(-name     => 'xrefs', -size => 40,
          -default  => $XRefDefault,
          -helplink => 'xrefentry', -helptext => 'Related Documents');
print "</td></tr>\n";

### References and Publication info

print "<tr class=\"$QuickClass\"><td colspan=\"4\">\n"; ReferenceForm(); print "</td></tr>\n";
print "<tr class=\"$QuickClass\"><td colspan=\"4\">\n"; PubInfoBox();    print "</td></tr>\n";

if ($UseSignoffs) { # FIXME: Later may be more complicated control
  print "<tr class=\"$QuickClass\"><td colspan=\"4\">\n";
  SignoffBox(-default => $SignoffDefault);
  print "</td></tr>\n";
}

if (($mode eq "updatedb" || $mode eq "update") && $SigStatus ne "Unmanaged" &&
    $SignoffDefault && CanPreserveSigs($mode)) {
  print '<tr><td colspan="4">';
  print FormElementTitle(-helplink => "preservesigs",
                         -helptext => "Preserve signatures on this revision?",
                         -nocolon => $TRUE, -nobreak => $TRUE);
  print $query -> checkbox(-name  => 'preservesigs', -label => "(Check for yes.)");
  print "</td></tr>\n";
}

print "<tr><td colspan=\"4\" class=\"SubmitCell\">\n";
if      ($mode eq "add") {
  print $query -> submit (-value => "Submit document");
} elsif ($mode eq "reserve") {
  print $query -> submit (-value => "Request document ID");
} elsif ($mode eq "update" || $mode eq "updatedb") {
  print $query -> submit (-value => "Update document");
}
print "</td></tr>\n";
print "</table>\n";

print $query -> end_multipart_form;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
