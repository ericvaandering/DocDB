#! /usr/bin/env perl

use lib ".";

#
#        Name: CustomListForm
# Description: Allow users, admins, and meeting organizers to change how various
#              lists of documents and agendas are displayed in DocDB
#
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "AdministerElements.pm";
require "ResponseElements.pm";
require "FormElements.pm";
require "Scripts.pm";
require "Security.pm";
require "Messages.pm";
require "Sorts.pm";
require "DocDBFields.pm";

require "DBUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "MeetingSecurityUtilities.pm";

require "ConfigSQL.pm";
require "MeetingSQL.pm";
require "MiscSQL.pm";
require "SecuritySQL.pm";

require "DocTypeHTML.pm";
require "DocumentHTML.pm";
require "MeetingHTML.pm";
require "TopicHTML.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);

my $Untaint = CGI::Untaint -> new($query -> Vars);

my $Scope = $Untaint -> extract(-as_printable => "scope") || "";
my @EventGroupIDs = @{ $Untaint -> extract(-as_listofint => "eventgroups") || undef };
my @EventIDs = @{ $Untaint -> extract(-as_listofint => "events") || undef };
my @Defaults = @{ $Untaint -> extract(-as_listofwords => "defaultlists") || undef };
my @TopicIDs = @{ $Untaint -> extract(-as_listofint => "topics") || undef };
my @DocTypeIDs = @{ $Untaint -> extract(-as_listofint => "doctype") || undef };
my $DefaultEventID = $Untaint -> extract(-as_integer => "eventid") || 0;

my $MaxFields = 15;
my @Cookies = ();

$query -> delete_all();

if ($Public) {
  CreateConnection(-type => "ro");
} else {
  CreateConnection(-type => "rw");
}
EndPage(-startpage => $TRUE);

GetConferences($TRUE);
GetAllEventGroups();
GetSecurityGroups();
GetDocTypes();

# Setup disable script correctly

my $AllowEvents = 0;
my $AllowAll    = 0;
if (CanCreate()) {
  $AllowEvents = 1;
}
if (CanAdminister()) {
  $AllowAll = 1;
}

### Build field list, will be used for everything later

my %FieldList = ();
foreach my $FieldCount (1..$MaxFields) {
  my $Field = $Untaint -> extract(-as_printable => "field$FieldCount") || "";
  if ($Field && $Field ne "xxxx") {
    push @ActionStack,"Field \"$Field\" added to the display";
    $FieldList{$Field}{Row}     = $Untaint -> extract(-as_integer => "row$FieldCount") || 0;
    $FieldList{$Field}{Column}  = $Untaint -> extract(-as_integer => "col$FieldCount") || 0;
    $FieldList{$Field}{RowSpan} = $Untaint -> extract(-as_integer => "rowspan$FieldCount") || 0;
    $FieldList{$Field}{ColSpan} = $Untaint -> extract(-as_integer => "colspan$FieldCount") || 0;
  }
}

if ($Scope eq "All") { # Do inserts to DB, check user's permissions
  foreach my $Default (@Defaults) {
    if ($AllowAll) {
      InsertCustomFieldList(-default => $Default, -fieldlist => \%FieldList);
      push @ActionStack,"Custom list set for $Default list";
    } else {
      push @WarnStack,"You are not allowed to default lists";
    }
  }
  foreach my $TopicID (@TopicIDs) {
    if ($AllowAll) {
      InsertCustomFieldList(-topicid => $TopicID, -fieldlist => \%FieldList);
      push @ActionStack,"Custom list set for Topic $TopicID";
    } else {
      push @WarnStack,"You are not allowed to modify topics";
    }
  }
  foreach my $EventGroupID (@EventGroupIDs) {
    if ($AllowAll) {
      InsertCustomFieldList(-eventgroupid => $EventGroupID, -fieldlist => \%FieldList);
      push @ActionStack,"Custom list set for Event Group $EventGroupID";
    } else {
      push @WarnStack,"You are not allowed to modify event groups";
    }
  }
  foreach my $EventID (@EventIDs) {
    if ($AllowEvents && CanModifyMeeting($EventID)) {
      InsertCustomFieldList(-eventid => $EventID, -fieldlist => \%FieldList);
      push @ActionStack,"Custom list set for Event $EventID";
    } else {
      push @WarnStack,"You are not allowed to modify this event";
    }
  }
  foreach my $DocTypeID (@DocTypeIDs) {
    if ($AllowAll) {
      InsertCustomFieldList(-doctypeid => $DocTypeID, -fieldlist => \%FieldList);
      push @ActionStack,"Custom list set for document type $DocTypeID";
    } else {
      push @WarnStack,"You are not allowed to document types";
    }
  }
} else { # We're doing cookies
  # Pack field lists into a string
  my @Settings = ();
  foreach my $Field (keys %FieldList) {
    my $Setting = join '_',$Field,$FieldList{$Field}{Row},
                                  $FieldList{$Field}{Column},
                                  $FieldList{$Field}{RowSpan},
                                  $FieldList{$Field}{ColSpan};
    push @Settings,$Setting;
  }
  my $Settings = join ";",@Settings;

  # Set set string for name(s) of cookie
  my @CookieNames = ();
  foreach my $Default (@Defaults) {
    push @CookieNames,$Default;
    push @ActionStack,"Custom list set for $Default list";
  }
  foreach my $TopicID (@TopicIDs) {
    push @CookieNames,"topicid_$TopicID";
    push @ActionStack,"Custom list set for Topic $TopicID";
  }
  foreach my $EventGroupID (@EventGroupIDs) {
    push @CookieNames,"eventgroupid_$EventGroupID";
    push @ActionStack,"Custom list set for Event Group $EventGroupID";
  }
  foreach my $EventID (@EventIDs) {
    push @CookieNames,"eventid_$EventID";
    push @ActionStack,"Custom list set for Event $EventID";
  }
  foreach my $DocTypeID (@DocTypeIDs) {
    push @CookieNames,"doctypeid_$DocTypeID";
    push @ActionStack,"Custom list set for document type $DocTypeID";
  }

  # Create CGI Cookie objects that "never" expire
  foreach my $CookieName (@CookieNames) {
    push @Cookies, $query -> cookie (-name => $CookieName, -value => $Settings,
                                     -path => $cgi_path, -expires => '+10y');
  }
}

### Start HTML

print $query->header( -charset => $HTTP_ENCODING, -cookies => \@Cookies);
DocDBHeader("Customize Document Lists","",-scripts => ["PopUps","CustomListDisable"]);

ActionReport();
EndPage();

print $query -> start_multipart_form('POST',$CustomListForm,
                                     "id=\"customlist\" name=\"customlist\"");

print q{<table class="MedPaddedTable">
        <tr>
        <td colspan="3">
        <p>This page allows you to change what information about documents is
        displayed in various parts of DocDB. You can choose to change the
        information just for yourself (you must allow cookies in your browser)
        or, if  your access level is high enough, for everyone. As a normal
        user, you may only change the  display of events you may modify. For
        other changes that affect all users,  please contact an administrator.
        Leave all the <q>field</q>  selections blank and select events, etc. to
        return to the DocDB  defaults for those lists.</p>
        <p>If you are using multiple rows, and especially if you are spanning
        columns or rows, it is easy to generate very difficult to read output.
        Also, not all fields will have information in all contexts.</p>
        </td>
        </tr>
        <tr>
        <td colspan="3">
       };

# Scope limiter which is hooked to JS

my %Scope = ();
$Scope{All}  = "For Everyone";
$Scope{User} = "Only for me";
print FormElementTitle(-helplink => "fieldscope", -helptext => "Scope of Changes");
print $query -> radio_group(-name    => "scope", -values   => \%Scope,
                            -default => "User",
                            -onclick => "disabler_customlist($AllowEvents,$AllowAll);");

print "</td></tr><tr><td>";

# Predefined lists

my @FieldLists = keys %DefaultFieldLists;
print FormElementTitle(-helptext => "Predefined Lists", -helplink => "definedfieldlists");
print $query -> scrolling_list(-name     => "defaultlists", -values => \@FieldLists,
                               -size     => 10, -multiple => $TRUE);

print "</td><td>\n";

# Topics (which might be left off for the moment)

TopicScroll({ -helptext => "Topics", -helplink => "topics", -multiple => $TRUE });
print "</td>\n";

# Document types here
print "<td>\n";
DocTypeSelect( {-multiple => $TRUE, -format => "short"} );
print "</td></tr>\n";

print "<tr><td>";

# Event groups and events. Put default here if they've followed the right link.

EventGroupSelect( {-multiple => $TRUE} );
print q{</td><td colspan="2">};
EventSelect( {-multiple => $TRUE, -default => [$DefaultEventID]} );
print "</td></tr>\n";

# Field list controls

print q{</table>};

print q{<table class="MedPaddedTable">};

foreach my $Partition (1..$MaxFields) {
  FieldListChooser(-partition => $Partition);
}

print q{<tr><td colspan="5" class="SubmitCell">};
print $query -> submit (-value => "Change Display of Fields");
print "</td></tr>\n";

print q{</table>};
print $query -> end_multipart_form;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
