#! /usr/bin/env perl

use lib ".";

#
#        Name: AddFilesForm
# Description: An entry form to add files to an existing document
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "Messages.pm";

require "SecuritySQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";

require "Security.pm";
require "ResponseElements.pm";

require "RevisionHTML.pm";
require "FileHTML.pm";

require "Cookies.pm";
require "Defaults.pm";
require "HTMLUtilities.pm";
require "SignoffUtilities.pm";
require "UntaintInput.pm";
require "Scripts.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&GetSecurityGroups;
&GetPrefsCookie;

my $DocumentID = $Untaint -> extract(-as_integer => "docid") || 0;
my $Upload = $Untaint -> extract(-as_safehtml => "upload") || undef;
my $NumberUploads = $Untaint -> extract(-as_integer => "numfile") || 0; # Global since not passed (oversight)
my $InputVersion = $Untaint -> extract(-as_integer => "version") || undef;

# Set defaults

&SetUploadMethod;
&SetFileOptions;

print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("File Addition","",-scripts => ["PopUps"]);

@ErrorStack = ();

unless ($DocumentID) {
  push @ErrorStack,"You are must supply a document number.";
}

&FetchDocument($DocumentID);

if ($InputVersion eq "0") {
  $Version = 0;
} else {
  if ($InputVersion) {
    $Version = $InputVersion;
  } else {
    $Version = $Documents{$DocumentID}{NVersions};
  }
}
my $DocRevID   = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);

my $UpdateLink = $DocumentAddForm."?mode=update&amp;docid=$DocumentID";
unless (&CanModify($DocumentID,$Version)) {
  push @ErrorStack,"You are not authorized to modify this document.";
}
unless ($DocRevID) {
  push @ErrorStack,"This document does not exist.";
}
unless ($Version) {
  push @ErrorStack,"You cannot add files to a document that has only been
  reserved. Create a new version instead. ";
}

# Warn the user if they are about to modify a controlled document
my ($SigStatus) = RevisionStatus($DocRevID);

if ($UseSignoffs) {
  require "SignoffUtilities.pm";
  unless ($SigStatus eq "Unmanaged") {
    if (CanPreserveSigs("update")) {
      push @WarnStack, $Msg_WarnModManagedHack;
    } else {
      push @WarnStack, $Msg_WarnModManaged;
    }
  }
}

WarnPage(@WarnStack); @WarnStack = ();
EndPage(@ErrorStack);


print "<h4>You are adding files to a version of a document.<br/>\n";
print "These should be files forgotten earlier or a new presentation format of
       an existing document.<br/>\n";
print "If these are files with updated information,
       <a href=\"$UpdateLink\">create a new version</a> instead.<br/>\n";
print "If you aren't <span class=\"Warning\">absolutely sure</span> this is what
       you want to do, go back and read the help.</h4>\n";

print "<h4>The current document document information is reproduced below:</h4>\n";

print "<hr/>\n";
&PrintRevisionInfo($DocRevID,-hidebuttons => $TRUE, -hideversions => $TRUE);
print "<hr/>\n";

print $query -> start_multipart_form('POST',$AddFiles);

print "<div>\n";
print $query -> hidden(-name => 'upload',  -default => 'file');
print $query -> hidden(-name => 'version', -default => $Version);
print $query -> hidden(-name => 'docid',   -default => $DocumentID);
print "</div>\n";

print '<table class="HighPaddedTable CenteredTable">'."\n";
print "<tr><td><strong>Files to add:</strong></td></tr>";

print "<tr><td>\n";
&FileUploadBox(-type => $Upload);
print "</td></tr>";

print "<tr><td>\n";
print FormElementTitle(-helplink => "replacefiles", -helptext => "Replace duplicate files?", -nocolon => $TRUE, -nobreak => $TRUE);
print $query -> checkbox(-name => "replace", -label => '(Check for yes.)',
                         -onclick => "helppopupwindow(\'DocDBHelp?term=replacefiles\');");
print "</td></tr>";

if ($SigStatus ne "Unmanaged" && CanPreserveSigs("update")) {
  print '<tr><td>';
  print FormElementTitle(-helplink => "preservesigs",
                         -helptext => "Preserve signatures on this revision?",
                         -nocolon => $TRUE, -nobreak => $TRUE);
  print $query -> checkbox(-name  => 'preservesigs', -label => "(Check for yes.)");
  print "</td></tr>\n";
}

if ($Preferences{Options}{SubmitAgree}) {
  print '<tr><td>';
  print $Preferences{Options}{SubmitAgree};
  print $query -> checkbox(-name  => 'submitagree', -label => "");
  print "</td></tr>\n";
}

print '<tr><td class="SubmitCell">'."\n";
print $query -> submit (-value => "Add Files");
print "</td></tr>";

print "</table>";
print $query -> end_multipart_form;

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
