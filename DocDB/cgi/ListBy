#! /usr/bin/env perl

use lib ".";

#
#        Name: $RCSfile$
# Description: Generate tables of document for various input parameters
#
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use Benchmark;
use CGI;
use CGI::Untaint;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "DocumentHTML.pm";
require "SecuritySQL.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "DocumentUtilities.pm";

my @Scripts = ("PopUps");
push @Scripts,"jquery/jquery-3.0.0.min","jquery/jquery.tablesorter.min","jquery/jquery.tablesorter.widgets";
@JQueryElements = ("tablesorter");
push @Scripts,"JQueryReady";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

my $Days = $Untaint -> extract(-as_integer => "days") || 0;
my $TypeID = $Untaint -> extract(-as_integer => "typeid") || 0;
my $AuthorID = $Untaint -> extract(-as_integer => "authorid") || 0;

my $TopicID = $Untaint -> extract(-as_integer => "topicid") || 0;
my $Topic = $Untaint -> extract(-as_safehtml => "topic") || "";

my $EventID = $Untaint -> extract(-as_integer => "eventid") || 0;
my $EventGroupID = $Untaint -> extract(-as_integer => "eventgroupid") || 0;
my $EventGroup = $Untaint -> extract(-as_safehtml => "eventgroup") || "";

my $GroupID = $Untaint -> extract(-as_integer => "groupid") || 0;
my $Group = $Untaint -> extract(-as_safehtml => "group") || "";

my $AllPubs = $Untaint -> extract(-as_safehtml => "allpubs") || "";
my $AllDocs = $Untaint -> extract(-as_safehtml => "alldocs") || "";
my $OldDocs = $Untaint -> extract(-as_safehtml => "old") || "";

my $Mode = $Untaint -> extract(-as_safehtml => "mode") || "";

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

GetSecurityGroups();

### Set defaults

my ($Title,  $Message, $List);
# Defaults, later can surround these in "unless"
my %FieldListOptions = (-default => "Default");
my $SortBy           = "date";
my $Reverse          = 1;

my @DocumentIDs = ();

if ($Days) {

### Days since last modification

  $Title   = "Documents from Last $Days Days";
  $Message = "These documents have been modified in the last <span class=\"Highlight\">$Days days</span>.";
  $List = $dbh -> prepare("select DISTINCT(DocumentID) from DocumentRevision where Obsolete=0 and TO_DAYS(NOW())-TO_DAYS(TimeStamp)<=?");
  $List -> execute($Days);
} elsif ($TopicID) {

### Topic
### FIXME: Add Topic lookup

  require "TopicSQL.pm";
  require "MeetingSQL.pm";
  require "TopicUtilities.pm";
  require "TopicHTML.pm";
  require "Utilities.pm";

  my @ChildTopicIDs  = TopicAndSubTopics({-topicid => $TopicID});
  my @ParentTopicIDs = FetchTopicParents({-topicid => $TopicID});

  my $HasSubTopics = (scalar(@ChildTopicIDs) > 1);
  $FieldListOptions{-topicid} = $TopicID;
  $Title   = "Document List by Topic";
  if ($OldDocs) {
    $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) ".
             "from (DocumentRevision,RevisionTopic) ".
             "where DocumentRevision.DocRevID=RevisionTopic.DocRevID and DocumentRevision.Obsolete=0 and RevisionTopic.TopicID=?");
  } else {
    $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) ".
             "from (DocumentRevision,RevisionTopic) ".
             "join (select DocumentRevision.DocumentID, max(DocumentRevision.VersionNumber) as mv from DocumentRevision ".
                   "group by DocumentRevision.DocumentID) maxver ".
             "on (DocumentRevision.DocumentID=maxver.DocumentID and DocumentRevision.VersionNumber=maxver.mv ) ".
             "where DocumentRevision.DocRevID=RevisionTopic.DocRevID and DocumentRevision.Obsolete=0 and RevisionTopic.TopicID=?");
  }

  foreach my $ChildTopicID (@ChildTopicIDs) {
    FetchTopic($ChildTopicID);
    $List -> execute($ChildTopicID);
    while (my ($DocumentID) = $List -> fetchrow_array) {
      push @DocumentIDs,$DocumentID;
    }
  }
  @DocumentIDs = Unique(@DocumentIDs);
  my $SubTopicMessage = "";
  if (@ParentTopicIDs) {
    my ($ParentTopicID) = @ParentTopicIDs;
    $SubTopicMessage = "(subtopic of ".TopicLink({-topicid => $ParentTopicID}).")";
  }

  $Message = "These documents on <span class=\"Highlight\">".
             SmartHTML({-text=>$Topics{$TopicID}{Long}}).
             "</span> $SubTopicMessage ";
  if ($HasSubTopics) {
    $Message .= "and sub-topics ";
  }
  $Message .= "are available:";

  if ($OldDocs) {
    $Message .= "<br/>Showing documents with any version with topic <span class=\"Highlight\">".
             SmartHTML({-text=>$Topics{$TopicID}{Long}}).
             "</span>. See documents with ".TopicLink({-topicid => $TopicID}).
             " only on the most recent version.";
  } else {
    $Message .= "<br/>Showing documents with topic <span class=\"Highlight\">".
             SmartHTML({-text=>$Topics{$TopicID}{Long}}).
             "</span> on the most recent version. See documents with ".TopicLink({-topicid => $TopicID, -olddocs=>$TRUE}).
             " on any version.";
  }

  my %Hash = GetEventHashByTopic($TopicID);
  if (%Hash) {
    $Message .= '<br/>(List <a href="'.$ListEventsBy.'?topicid='.$TopicID.'">events</a> on '.SmartHTML({-text=>$Topics{$TopicID}{Long}}).')';
  }
} elsif ($AuthorID) {

### Author
  require "AuthorSQL.pm";
  require "AuthorHTML.pm";
  require "MeetingSQL.pm";

  GetInstitutions();
  FetchAuthor($AuthorID);
  unless ($Authors{$AuthorID}{LastName}) {
    push @ErrorStack,$Msg_AuthorInvalid;
  }

  $FieldListOptions{-authorid} = $AuthorID; # (Does nothing right now)
  $Title   = "Document List by Author";

  my $Link = AuthorLink($AuthorID);
  my $LinkWithOld = AuthorLink($AuthorID, -olddocs => $TRUE);

  $Message = "<span class=\"Highlight\">$Link of ";
  $Message .= SmartHTML( {-text => $Institutions{$Authors{$AuthorID}{InstitutionID}}{LONG}, } );
  if ($OldDocs) {
    $Message .= "</span> is listed as an author on some version of the following documents:";
    $Message .= "<br/>See documents with ".$Link." as an author only on the most recent version.";
  } else {
    $Message .= "</span> is listed as an author on the most recent version of the following documents:";
    $Message .= "<br/>See documents with ".$LinkWithOld." on any version.";
  }

  my %Hash = GetEventHashByModerator($AuthorID);
  if (%Hash) {
    $Message .= '<br/>(List <a href="'.$ListEventsBy.'?authorid='.$AuthorID.'">events</a> moderated by '.$Link.')';
  }
  @DocumentIDs = GetAuthorDocuments($AuthorID, $OldDocs);
} elsif ($EventID) {

### Event

  require "MeetingSQL.pm";
  FetchEventByEventID($EventID);

  $FieldListOptions{-eventid}      = $EventID;
  $FieldListOptions{-eventgroupid} = $Conferences{$EventID}{EventGroupID};
  $Title   = "Document List by Event";
  $Message = "These documents from <span class=\"Highlight\">";
  $Message .= SmartHTML({-text => $Conferences{$EventID}{LongDescription}});
  $Message .= "</span> ";
  if ($Conferences{$EventID}{URL}) {
    $Message .= "(".SmartHTML({-text => $Conferences{$EventID}{URL}, -makeURLs=>$TRUE})."</a>) ";
  }
  $Message .= "are available:";
  $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) from ".
           "DocumentRevision,RevisionEvent where DocumentRevision.DocRevID=RevisionEvent.DocRevID ".
           "and DocumentRevision.Obsolete=0 and RevisionEvent.ConferenceID=?");
  $List -> execute($EventID);
} elsif ($EventGroupID || $EventGroup) {

### Event Group (name or number)

  require "MeetingSQL.pm";
  $SortBy = "confdate";

  unless ($EventGroupID) {
    $EventGroupID = LookupEventGroup($EventGroup);
  }
  FetchEventGroup($EventGroupID);

  $FieldListOptions{-eventgroupid} = $EventGroupID;
  $FieldListOptions{-default}      = "Event Group Default";
  $Title   = "Document List by Event Group";
  $Message = "These documents from <span class=\"Highlight\">";
  $Message .= SmartHTML({-text => $EventGroups{$EventGroupID}{LongDescription},});
  $Message .="</span> are available:";
  $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) from ".
           "DocumentRevision,RevisionEvent,Conference where DocumentRevision.DocRevID=RevisionEvent.DocRevID ".
           "and DocumentRevision.Obsolete=0 and RevisionEvent.ConferenceID=Conference.ConferenceID and Conference.EventGroupID=?");
  $List -> execute($EventGroupID);
} elsif ($TypeID) {
  require "MiscSQL.pm";
  FetchDocType ($TypeID);
  $FieldListOptions{-doctypeid} = $TypeID;
  $Title   = "Document List by Type";

  $Message = "These documents of type <span class=\"Highlight\">";
  $Message .= SmartHTML({-text => $DocumentTypes{$TypeID}{SHORT},});
  $Message .= "</span> are available:";

  $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) from ".
           "DocumentRevision where DocumentRevision.DocTypeID=?");
  $List -> execute($TypeID);
} elsif ($GroupID || $Group) {
  if ($Group) {
    $GroupID = FetchSecurityGroupByName($Group);
  }
  $Title   = "Document List by Group";
  $Message = "These documents for <span class=\"Highlight\">";
  $Message .= SmartHTML({-text => $SecurityGroups{$GroupID}{NAME},});
  $Message .= "</span> are available:";

  $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) from ".
           "DocumentRevision,RevisionSecurity where DocumentRevision.DocRevID=RevisionSecurity.DocRevID ".
           "and DocumentRevision.Obsolete=0 and RevisionSecurity.GroupID=?");
  $List -> execute($GroupID);
} elsif ($AllPubs) {
  $Title   = "$Project Publications";
  $Message = "These publications are available:\n";
  $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) from ".
           "DocumentRevision,RevisionReference ".
           "where DocumentRevision.DocRevID=RevisionReference.DocRevID and RevisionReference.JournalID>0");
  $List -> execute();
} elsif ($AllDocs) {
  $Title   = "All $Project Documents";
  $Message = "";
  $List = $dbh -> prepare("select DISTINCT(DocumentRevision.DocumentID) from ".
           "DocumentRevision");
  $List -> execute();
}


if ($Mode eq "conference") {
  $FieldListOptions{-default} = "Conference Mode";
  $SortBy  = "confdate";
} elsif ($Mode eq "meeting") {
  $FieldListOptions{-default} = "Meeting Mode";
  $SortBy  = "requester";
  $Reverse = 0;
} elsif ($Mode eq "pubs") {
  $FieldListOptions{-default} = "Publications";
}

# Do the fetch on the $List. "unless (@DocumentIDs)" here to do complex fetches, user specify

unless (@DocumentIDs) { # Some do their own
  if ($List) {
    my $DocumentID;
    $List -> bind_columns(undef, \($DocumentID));
    while ($List -> fetch) {
      push @DocumentIDs,$DocumentID;
    }
  }
}

### Start HTML

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader($Title, "",  -scripts => \@Scripts, -jqueryelements => \@JQueryElements);

print "<h4>$Message</h4><p/>\n";

# Special HTML for special situations

if ($Days) { # Print out modified by form
  require "FormElements.pm";

  print $query -> start_form('POST',"$ListBy");
  print "<center>";
  print $query -> submit(-class => "Action", -value => "Show Documents");
  print " modified in the last ";
  DaysPulldown($Days);
  print " days.</center>";
  print $query -> end_form;
  print "<p/>";
}

### Table and Statistics
my %FieldList = PrepareFieldList(%FieldListOptions);
my $NumberOfDocuments = DocumentTable(-fieldlist => \%FieldList, -docids  => \@DocumentIDs,
                                      -sortby    => $SortBy,     -reverse => $Reverse);
print "<p><b>Number of documents found: ",int($NumberOfDocuments),"</b></p>\n";

$EndTime  = new Benchmark;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
