#! /usr/bin/env perl

use lib ".";

#
#        Name: ListAllMeetings
# Description: Generates a nice table of all meetings, either for viewing or modification
#
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "MeetingSQL.pm";
require "MeetingHTML.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "SecuritySQL.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

my $Mode = $Untaint -> extract(-as_printable => "mode") || "display";
my $EventGroupID = $Untaint -> extract(-as_integer => "eventgroupid") || 0;
my $EventGroup = $Untaint -> extract(-as_integer => "eventgroup") || 0;

GetSecurityGroups();

print $query -> header( -charset => $HTTP_ENCODING );

my $PageTitle;
if ($Mode eq "modify") {
  $PageTitle = "Modify Events";
} else {
  $PageTitle = "List of Events";
}

DocDBHeader($PageTitle);

if ($EventGroup || $EventGroupID) {
  unless ($EventGroupID) {
    $EventGroupID = LookupEventGroup($EventGroup);
  }
  my @EventIDs = FetchEventsByGroup($EventGroupID);
  foreach my $EventID (@EventIDs) {
    FetchEventByEventID($EventID,$TRUE);
  }
  EventsByGroup( {-groupid => $EventGroupID, -mode => $Mode, -singlegroup => $TRUE} );
} else {
  GetConferences($TRUE);
  if ($Mode eq "modify") {
    print "<h3>Select an event to change:</h3>\n";
    EventsTable( {-mode => "modify"} );
  } else {
    print "<h3>All events";
    if ($Preferences{Components}{iCal}) {
      print ' '.ICalLink({ -allevents => 1 });
    }
    print "</h3>\n";
    EventsTable( {-mode => "display"} );
  }
}

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
