#! /usr/bin/env perl

use lib ".";

#
#        Name: DocumentDatabase
# Description: The Document Database homepage. Give the user various ways to
#              view documents, a link to ways to change documents, and a list
#              of the most recently updated documents.
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# TODO: Do a redirect for first time users of shibboleth?

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "SecuritySQL.pm";
require "SecurityHTML.pm";
require "Security.pm";
require "Scripts.pm";
require "FormElements.pm";
require "XRefSQL.pm";

require "Messages.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);
GetSecurityGroups();

my $CertificateStatus;
if ($UserValidation eq "certificate") {
  require "CertificateUtilities.pm";
  $CertificateStatus = CertificateStatus();
}

my @Scripts = ("PopUps");
push @Scripts,"jquery/jquery-3.0.0.min","jquery/jquery.tablesorter.min","jquery/jquery.tablesorter.widgets";
@JQueryElements = ("tablesorter");
push @Scripts,"JQueryReady";

print $query->header( -charset => $HTTP_ENCODING );
if ($UserValidation eq "certificate" && $CertificateStatus ne "verified") {
  DocDBHeader("$Project Document Database","Document Database", -scripts => ["PopUps"], -refresh => "5;url=$CertificateApplyForm");
} else {
  DocDBHeader("$Project Document Database","Document Database", -scripts => \@Scripts, -jqueryelements => \@JQueryElements);
}

my $PersonalAccountLink = PersonalAccountLink();

print "<div id=\"DocDBHomeBody\">\n";

### Header info

print "<div id=\"Header3Col\">\n";

if ($UserValidation eq "certificate" && $CertificateStatus ne "verified") {
  print "<h3 class=\"Warning\">\n";
  print "You have presented a valid certificate, but are not yet authorized to access the DocDB.</h3>\n";
  print "<h2 class=\"AccessApplyLink\">\n";
  print "<a href=\"$CertificateApplyForm\">Apply for access or get more information.</a></h2>\n";
  print "<h3>You will be redirected here in 5 seconds.</h3>\n";
  print "\n";
}

if ($WelcomeMessage) {
  print "<h4>\n";
  print "$WelcomeMessage\n";
  print "</h4>\n";
}

print "</div>\n";  # Header3Col

### Left Column

print "<div id=\"LeftColumn3Col\">\n";
print "<p><strong><a href=\"$DocDBInstructions\">Instructions</a></strong></p>\n";
if (!$Public or $UserValidation eq "FNALSSO") {  # Public set if not in any groups. Should be able to apply if not in groups
  if ($PersonalAccountLink) {
    print "<p><strong>$PersonalAccountLink</strong></p>\n";
  }
  print "<p><strong><a href=\"$SelectPrefs\">Preferences</a></strong></p>\n";
  if ($UserValidation eq "FNALSSO") {
    print "<p><strong><a href=\"$CertificateApplyForm\">Apply to Groups</a></strong></p>\n";
  }
  if ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $UserValidation eq "FNALSSO") {
    print "<p><strong>",&GroupLimitLink(),"</strong></p>\n";
  }
}
print "<p><strong><a href=\"$Statistics\">DocDB Statistics</a></strong></p>\n";

foreach my $Text (@{ $ProjectMessages{Homepage}{LeftColumn} }) {
  print "<p><strong>$Text</strong></p>\n";
}
print "<p><strong><a href=\"$DocDBHome\">About DocDB</a></strong></p>\n";

print "</div>\n";  # LeftColumn3Col

### Main Column

print "<div id=\"MainColumn3Col\">\n";

if (CanAdminister()) {
  print "<div class=\"HomepageMainChoice\"><strong><a href=\"$AdministerHome\">Administer DocDB</a></strong></div>\n";
}
if (CanCreate()) {
  print "<div class=\"HomepageMainChoice\"><strong><a href=\"$ModifyHome\">Create or change documents or other information</a></strong></div>\n";
}

my @ExternalDocDBIDs = GetAllExternalDocDBs();
my $SearchDiv  = $query -> start_form('POST',$Search);
   $SearchDiv .= "<div>\n";
   $SearchDiv .= $query -> submit (-value => "Search");
   $SearchDiv .= " <strong>for</strong> ";
   $SearchDiv .= $query -> textfield(-name => "simpletext", -size => 40, -maxlength => 300);
   $SearchDiv .= $query -> hidden(-name => "simple", -default => '1');
   $SearchDiv .= " <strong>(<a href=\"$SearchForm#Advanced\">Advanced</a>";
if (@ExternalDocDBIDs) {
   $SearchDiv .= " or <a href=\"$XSearch\">Cross Search</a>";
}
   $SearchDiv .= ")</strong>";
   $SearchDiv .= "\n</div>\n";
   $SearchDiv .= $query -> end_form;

print "<div class=\"HomepageMainChoice\">$SearchDiv</div>\n";

my $ShowForm  = $query -> start_form('POST',$ShowDocument);
   $ShowForm .= "<div>\n";
   $ShowForm .= $query -> submit (-value => "Show");
   $ShowForm .= " <strong>$ShortProject-doc-#</strong> ";
   $ShowForm .= $query -> textfield(-name => "docid", -size => 6, -maxlength => 6);
   $ShowForm .= " <strong>-v</strong> ";
   $ShowForm .= $query -> textfield(-name => "version", -size => 3, -maxlength => 3);
   $ShowForm .= "\n</div>\n";
   $ShowForm .= $query -> end_form;

print "<div class=\"HomepageMainChoice\">$ShowForm</div>\n";

# Last modified pulldown

if ($Preferences{Components}{LastModifiedHome}) {
  print "<div class=\"HomepageMainChoice\">\n";
  print $query -> start_form('POST',$ListBy);
  print "<div>\n";
  print $query -> submit (-value => "Show");
  print "<strong> documents modified in the last </strong>";
  DaysPulldown($LastDays);
  print "<strong> days</strong>";
  print "</div>\n";
  print $query -> end_form;
  print "</div>\n";
}

if ($Preferences{Components}{Calendar}) {
  print "<div class=\"HomepageMainChoice\">\n";
  print "<strong><a href=\"$ShowCalendar\">Calendar</a> of events or <a href=\"$ShowCalendar?todayonly=1\">today's</a> events</strong>";
  print "</div>\n";
}

# Fill arrays that print lists of documents

my @FirstColumn  = ();
my @OtherColumns = ();
my @Spanners     = ();

push @FirstColumn,"<a href=\"$ListAuthors\">Authors</a>";
push @FirstColumn,"<a href=\"$ListTopics\">Topics</a>";
push @FirstColumn,"<a href=\"$ListGroups\">Groups</a>";
push @FirstColumn,"<a href=\"$ListKeywords\">Keywords</a>";
unless ($Public && !$PublicAccess{MeetingList}) {
  push @FirstColumn,"<a href=\"$ListAllMeetings\">Events</a>";
}

if ($UseSignoffs && (!$Public || $PublicAccess{MeetingList})) {
  push @OtherColumns,"<a href=\"$ListManagedDocuments\">Managed documents</a>";
}
if ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $UserValidation eq "FNALSSO" ||
    (!$Public && $Preferences{Options}{DynamicFullList}{Private}) ||
    ( $Public && $Preferences{Options}{DynamicFullList}{Public})) {
  push @OtherColumns,"<a href=\"$ListBy?alldocs=1\">All documents</a>";
} else {
  push @OtherColumns,"<a href=\"$web_root/Static/Lists/$remote_user/FullList.html\">All documents</a>";
}

push @OtherColumns,@{ $ProjectMessages{Homepage}{DocumentLists} };
push @Spanners,@MultiColumnDocumentLists;

my $Rows = scalar(@FirstColumn);
my $Cols = int((scalar(@OtherColumns) - 1)/scalar(@FirstColumn) + 1);

# Print table for lists of documents

print "<strong>List:</strong>\n";

print "<table id=\"DocListMethods\" class=\"MedPaddedTable\">\n";

for (my $Index = 0; $Index < $Rows; ++$Index) {
  print "<tr>\n";
  print "<td>&nbsp;&loz;&nbsp;",$FirstColumn[$Index],"</td>\n";
  for (my $ColIndex = 0; $ColIndex < $Cols; ++$ColIndex) {
    unless ($Index+$ColIndex*$Rows >= scalar(@OtherColumns)) {
      print "<td>&nbsp;&loz;&nbsp;",$OtherColumns[$Index+$ColIndex*$Rows],"</td>\n";
    }
  }
  print "</tr>\n";
}

++$Cols;

foreach my $Spanner (@Spanners) {
  print "<tr>\n";
  print "<td colspan=\"$Cols\">&nbsp;&loz;&nbsp;",$Spanner,"</td>\n";
  print "</tr>\n";
}

print "</table>\n";

### Right column (wrapped around by middle column)

#print "<div id=\"RightColumn3Col\">\n";
#print "</div>\n";  # RightColumn3Col

print "</div>\n";  # MainColumn3Col

print "<div id=\"Footer3Col\">\n"; # Must have to keep NavBar on true bottom
print "</div>\n";  # Footer3Col
print "</div>\n";  # DocDBHomeBody

# Fill arrays with stuff that goes in main, bold table

# Modified in last few days

{
  require "DocumentHTML.pm";
  require "DocumentUtilities.pm";

### Get list of documents

  my $SortBy  = "date";
  my $Reverse = 1;

  my $List = $dbh -> prepare("select DISTINCT(DocumentID) from DocumentRevision where Obsolete=0 and TO_DAYS(NOW())-TO_DAYS(TimeStamp)<=?");
     $List -> execute($HomeLastDays);

  my @DocumentIDs = ();
  my $DocumentID;
  $List -> bind_columns(undef, \($DocumentID));
  while ($List -> fetch) {
    push @DocumentIDs,$DocumentID;
  }

### Print table

  if (@DocumentIDs) { ### FIXME: Move both kinds of titles into DocumentTable
    print "<hr/><h4>\n";
    if ($#DocumentIDs >= $HomeMaxDocs) {
      print "Last $HomeMaxDocs documents modified\n";
    } else {
      print "Documents modified in the last $HomeLastDays days\n";
    }
    print "</h4>\n";
  }

  my %FieldList = PrepareFieldList(-default => "Default");
  my $NumberOfDocuments = DocumentTable(-fieldlist => \%FieldList, -docids  => \@DocumentIDs,
                                        -sortby    => $SortBy,     -reverse => $Reverse,
                                        -maxdocs   => $HomeMaxDocs);
}

$EndTime  = new Benchmark;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
