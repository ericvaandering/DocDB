#! /usr/bin/env perl
#
#        Name: EmailCreate
# Description: Creates a new e-mail notification account
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified:
#

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "ResponseElements.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);
@ErrorStack = ();

my $Untaint = CGI::Untaint -> new($query -> Vars);

# Collect parameters

my $UserName = $Untaint -> extract(-as_safehtml => "username") || "";
my $Password = $Untaint -> extract(-as_printable => "password") || "";
my $PassConf = $Untaint -> extract(-as_printable => "passconf") || "";
$UserName =~ s/\s+//g;
$Password =~ s/\s+//g;
$PassConf =~ s/\s+//g;

# Do the passwords match, is there a password, and are the username characters reasonable?

if ($Password eq "") {
  push @ErrorStack,"You may not supply an empty password. Please go back and try again.";
}
if ($Password ne $PassConf) {
  push @ErrorStack,"The passwords you entered did not match. Please go back and try again.";
}
if ($UserName !~ /^[a-zA-Z][a-zA-Z0-9_\.\-\@]+$/) {
  push @ErrorStack,"Your username may not contain any special characters except dash, period, \@, or underscore.";
}


# Does the username already exist?

my $UserFetch =  $dbh->prepare("select COUNT(EmailUserID) from EmailUser where Username=?");
   $UserFetch -> execute($UserName);
my ($UserExists) = $UserFetch -> fetchrow_array;

if ($UserExists) {
  push @ErrorStack,"The username you entered already exists. Please go back and try again.";
}

# Start the page

print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("Notification Account Creation");

# Everything is OK, create the account

unless (@ErrorStack) {
  srand (time ^ $$ ^ unpack "%32L*", `ps -eaf`);

  my $Salt = ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]).
             ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]);

  my $EncryptedPassword = crypt($Password,$Salt);
  my $UserInsert        = $dbh -> prepare(
     "insert into EmailUser (EmailUserID,Username,Password) ".
     "values                (0,          ?,       ?)");
     $UserInsert -> execute($UserName,$EncryptedPassword);

  print "User <b>$UserName</b> created. Do not forget your password, there is no way to
  retrieve it.<p>\n";
}

EndPage(@ErrorStack);

&DocDBNavBar;
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

