#! /usr/bin/env perl

use lib ".";

#
#        Name: UserAccessApply
# Description: Deal with the process of having a user apply to use DocDB via their certificate
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use Benchmark;
use CGI;
use CGI::Untaint;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "Messages.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "ResponseElements.pm";
require "SecuritySQL.pm";

require "CertificateUtilities.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

### Start HTML

print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("Certificate Application");

EndPage();

### Output Information

my $CertificateStatus = &CertificateStatus();
my $CertEmail = $Untaint -> extract(-as_safehtml => "email") || "";

unless ($CertEmail) {
  push @ErrorStack,"You must supply an e-mail address.";
}

EndPage();

my $CertCN    = $ENV{SSL_CLIENT_S_DN_CN};
my $CertDN    = $ENV{SSL_CLIENT_S_DN};

if ($CertificateStatus eq "verified") {
  print "<b>Your certificate has already been verified. A new request has NOT been generated.<br>".
        "You have access to documents from these groups:</b>";
  my @GroupIDs = &FetchSecurityGroupsByCert();
  print "<ul>\n";
  if (@GroupIDS) {
    foreach my $GroupID (@GroupIDs) {
      &FetchSecurityGroup($GroupID);
      print "<li>",$SecurityGroups{$GroupID}{NAME},"</li>\n";
    }
  } else {
    print "<li>None: Contact an administrator if this is incorrect</li>\n";
  }
  print "</ul>\n";
} elsif ($CertificateStatus eq "unverified") {
  print "<b>You have already applied for access to documents. A new request has not been generated.
         If you believe your request has been misplaced or neglected, contact an administrator.</b>";
  print "The following information may be helpful:<br>\n";
  print "<b>Certificate Distinguished Name (DN):</b> $CertDN<br>\n";
  print "<b>Certificate Common Name (CN):</b> $CertCN<br>\n";
  print "<b>Certificate E-mail Address:</b> $CertEmail<br>\n";
} elsif ($CertificateStatus eq "nocert") {
  print "<b>You didn't present a certificate. Make sure your browser is supplying one and contact an administrator if are supplying one.</b>";
} elsif ($CertificateStatus eq "noapp") {

### Get additional parameters

  my $CertNote = $Untaint -> extract(-as_safehtml => "certnote") || "";
  my @RequestedGroupIDs = @{ $Untaint -> extract(-as_listofint => "reqgroups") || undef };
  my $UserName = $CertDN;

### Fill in DB tables

  my $UserInsert = $dbh -> prepare(
      "insert into EmailUser (EmailUserID,Username,Name,EmailAddress,Verified,Password) ".
      "            values (0,?,?,?,0,'x')");
     $UserInsert -> execute($UserName,$CertCN,$CertEmail);
  my $EmailUserID = $UserInsert -> {mysql_insertid}; # Works with MySQL only

  my $UsersGroupInsert = $dbh -> prepare(
      "insert into UsersGroup (UsersGroupID,EmailUserID,GroupID) ".
      "            values (0,?,?)");
  foreach my $GroupID (@RequestedGroupIDs) {
    if ($GroupID) {
      $UsersGroupInsert -> execute($EmailUserID,$GroupID);
    }
  }

### Notify applicant and administrator


  print "You ($CertDN with e-mail address $CertEmail) have requested ";
  print "access to $Project DocDB. ";
  print "You have requested membership in the following groups:\n";
  print "<ul>\n";
  foreach my $GroupID (@RequestedGroupIDs) {
    &FetchSecurityGroup($GroupID);
    print "<li>",$SecurityGroups{$GroupID}{NAME},"</li>\n";
  }
  print "</ul>\n";

  if ($MailInstalled) {
    require "EmailUtilities.pm";

    print "An e-mail has been sent to the administrators and a confirmation e-mail has been sent to you.<p/>\n";

    my @To      = ($DBWebMasterEmail);
    my $Subject = "$CertCN requests access to $Project DocDB";
    my $Body    = "$CertCN (Certificate DN $CertDN) with e-mail address $CertEmail has requested ";
    $Body      .= "access to $Project DocDB. ";
    $Body      .= "He or she requests membership in the following groups:\n";
    foreach my $GroupID (@RequestedGroupIDs) {
      FetchSecurityGroup($GroupID);
      $Body .= " - ".$SecurityGroups{$GroupID}{NAME}."\n";
    }
    $Body .= "\n";

    if ($CertNote) {
      $Body .= "The user attached this note to their application:\n";
      $Body .= $CertNote."\n\n";
    }

    $Body .= "If this is correct, please visit one of these URLs:\n\n";

    my $AdminURL;
    if ($Preferences{Security}{Instances}{Shibboleth}) {
      $AdminURL = $Preferences{Security}{Instances}{Shibboleth} . '/EmailAdministerForm';
      $Body .= "SSO URL:\n".HTML::Entities::decode_entities($AdminURL)."\n\n";
    }
    if ($Preferences{Security}{Instances}{FNALSSO}) {
      $AdminURL = $Preferences{Security}{Instances}{FNALSSO} . '/EmailAdministerForm';
      $Body .= "Services account / Single Sign-On URL:\n".HTML::Entities::decode_entities($AdminURL)."\n\n";
    }
    if ($Preferences{Security}{Instances}{Certificate}) {
      $AdminURL = $Preferences{Security}{Instances}{Certificate} . '/EmailAdministerForm';
      $Body .= "Certificate URL:\n".HTML::Entities::decode_entities($AdminURL)."\n\n";
    }
    if ($Preferences{Security}{Instances}{Basic}) {
      $AdminURL = $Preferences{Security}{Instances}{Basic} . '/EmailAdministerForm';
      $Body .= "DocDB username/password URL:\n".HTML::Entities::decode_entities($AdminURL)."\n\n";
    }

    $Body .= "If you want to give the new account the same permissions as a user's existing account:\n".
             "Select \"Transfer\", select the user's old account from which to transfer permissions ".
             "in the top list, select the user's new account to which to transfer permissions ".
             "in the bottom list, and click \"Modify Personal Account\".\n\n";

    $Body .= "Otherwise, if you want to authorize the new account without transferring from an old account:\n".
             "Select \"Modify\", select the user, check \"Verify\", and click \"Modify Personal Account\".\n".
             "If the groups are not correct, select \"Clear User's Groups\" and then ".
             "select all the correct groups before clicking \"Modify Personal Account\".\n";

    SendEmail(-body => $Body, -to => \@To, -subject => $Subject);

    my @To      = ($CertEmail);
    my $Subject = "$CertCN requests access to $Project DocDB";
    my $Body    = "Dear $CertCN,\n\n";
    $Body      .= "You, or someone using your e-mail address ($CertEmail) has requested ";
    $Body      .= "access to $Project DocDB. If you did not initiate this request, ";
    $Body      .= "please contact the DocDB administrators at $DBWebMasterEmail immediately.\n\n";
    $Body      .= "If you did request this access, please give the ";
    $Body      .= "administrators a few business days to respond to your request.\n";
    $Body      .= "Thank you.";

    &SendEmail(-body => $Body, -to => \@To, -subject => $Subject);
  }

}

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
