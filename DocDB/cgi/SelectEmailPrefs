#! /usr/bin/env perl

use lib ".";

#
#        Name: SelectEmailPrefs.pm
# Description: Change preferences for what/when to be notified of document
#              changes in e-mail.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2017 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "EmailSecurity.pm";
require "MailNotification.pm";
require "Scripts.pm";
require "Sorts.pm";
require "Security.pm";
require "SearchFormElements.pm";

require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "DocumentUtilities.pm";

require "AuthorSQL.pm";
require "NotificationSQL.pm";
require "SecuritySQL.pm";
require "TopicSQL.pm";

require "DocumentHTML.pm";
require "MeetingHTML.pm";
require "TopicHTML.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

GetTopics();
GetAuthors();

my $Untaint = CGI::Untaint -> new($query -> Vars);

# Collect parameters

my $Mode = $Untaint -> extract(-as_safehtml => "mode") || "";
my $UserName = $Untaint -> extract(-as_safehtml => "username") || "";
my $Password = $Untaint -> extract(-as_printable => "password") || "";
my $NewPass = $Untaint -> extract(-as_printable => "newpass") || "";
my $ConfNewPass = $Untaint -> extract(-as_printable => "confnewpass") || "";
my $Digest = $Untaint -> extract(-as_safehtml => "digest") || "";

my $Name = $Untaint -> extract(-as_safehtml => "name") || "";
my $Email = $Untaint -> extract(-as_email => "email") || "";
my $HTML = $Untaint -> extract(-as_safehtml => "html") || "";

my @ImmediateEventGroupIDs = @{ $Untaint -> extract(-as_listofint => "immediate_eventgroups") || undef };
my @DailyEventGroupIDs = @{ $Untaint -> extract(-as_listofint => "daily_eventgroups") || undef };
my @WeeklyEventGroupIDs = @{ $Untaint -> extract(-as_listofint => "weekly_eventgroups") || undef };

my @ImmediateEventIDs = @{ $Untaint -> extract(-as_listofint => "immediate_events") || undef };
my @DailyEventIDs = @{ $Untaint -> extract(-as_listofint => "daily_events") || undef };
my @WeeklyEventIDs = @{ $Untaint -> extract(-as_listofint => "weekly_events") || undef };

my @ImmediateTopicIDs = @{ $Untaint -> extract(-as_listofint => "immediate_topics") || undef };
my @DailyTopicIDs = @{ $Untaint -> extract(-as_listofint => "daily_topics") || undef };
my @WeeklyTopicIDs = @{ $Untaint -> extract(-as_listofint => "weekly_topics") || undef };

my @ImmediateAuthorIDs = @{ $Untaint -> extract(-as_listofint => "immediate_authors") || undef };
my @DailyAuthorIDs = @{ $Untaint -> extract(-as_listofint => "daily_authors") || undef };
my @WeeklyAuthorIDs = @{ $Untaint -> extract(-as_listofint => "weekly_authors") || undef };

my $ImmediateAll = $Untaint -> extract(-as_safehtml => "immediate_all") || "";
my $DailyAll = $Untaint -> extract(-as_safehtml => "daily_all") || "";
my $WeeklyAll = $Untaint -> extract(-as_safehtml => "weekly_all") || "";

my $ImmediateKeywords = $Untaint -> extract(-as_safehtml => "immediate_keywords") || "";
my $DailyKeywords = $Untaint -> extract(-as_safehtml => "daily_keywords") || "";
my $WeeklyKeywords = $Untaint -> extract(-as_safehtml => "weekly_keywords") || "";

$ImmediateKeywords =~ s/,/ /g; my @ImmediateKeywords = split /\s+/,$ImmediateKeywords;
$DailyKeywords     =~ s/,/ /g; my @DailyKeywords     = split /\s+/,$DailyKeywords    ;
$WeeklyKeywords    =~ s/,/ /g; my @WeeklyKeywords    = split /\s+/,$WeeklyKeywords   ;

my $ImmediateDocuments = $Untaint -> extract(-as_safehtml => "immediate_documents") || "";
$ImmediateDocuments =~ s/,/ /g; my @ImmediateDocuments = split /\s+/,$ImmediateDocuments;

$UserName =~ s/\s+//g;
$Password =~ s/\s+//g;

my ($FQUN, $EmailAddress, $Name);

if ($UserValidation eq "shibboleth") {
  $UserName = $ENV{ADFS_LOGIN};
} elsif ($UserValidation eq "FNALSSO") {
  require "FNALSSOUtilities.pm";
  ($FQUN, $UserName, $EmailAddress, $Name) = GetUserInfoFSSO();
  $UserName = $FQUN;
}  

if (($NewPass || $ConfNewPass) && ($NewPass ne $ConfNewPass)) {
  push @WarnStack,"The passwords you entered did not match. Password not
  changed.";
}

if (!$Email && $query->param('email')) { # Checking raw param to see if the user tried to supply one
  push @ErrorStack,"The email address does not appear to be valid. Please try again.";
}

if ($Mode eq "newuser") {
  my $PassConf = $Untaint -> extract(-as_printable => "passconf") || "";
  $PassConf =~ s/\s+//g;

# Do the passwords match, is there a password

  if ($Password eq "") {
    push @ErrorStack,"You may not supply an empty password. Please try again.";
  }
  if ($Password ne $PassConf) {
    push @ErrorStack,"The passwords you entered did not match. Please try again.";
  }

# Does the username already exist and is it valid
  if ($UserName !~ /^[a-zA-Z][a-zA-Z0-9_\.\-\@]+$/) {
    push @ErrorStack,"Your username may not contain any special characters except dash, period, at, or underscore.";
  }

  my $UserFetch =  $dbh->prepare("select COUNT(EmailUserID) from EmailUser where Username=?");
     $UserFetch -> execute($UserName);
  my ($UserExists) = $UserFetch -> fetchrow_array;

  if ($UserExists) {
    push @ErrorStack,"The username you entered already exists. Please try again.";
  }
}

my @Scripts = ("PopUps");
push @Scripts,"jquery/jquery-3.0.0.min","jquery/jquery.tablesorter.min","jquery/jquery.tablesorter.widgets";
@JQueryElements = ("tablesorter");
push @Scripts,"JQueryReady";

# Start the page

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader("Update Notification Preferences", "", -scripts => \@Scripts, -jqueryelements => \@JQueryElements);

my $EmailUserID;
# Create new user if called for

if ($Mode eq "newuser") {
  if (@ErrorStack) { # There's a problem, so let them try again
    ErrorPage(@ErrorStack);
    NewEmailUserForm();
    print "<p/>\n";
    LoginEmailUserForm();
    print "<p/>\n";
    EndPage();
  } else { # Everything OK, lets create the user
    srand (time ^ $$ ^ unpack "%32L*", `ps -eaf`);

    my $Salt = ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]).
               ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]);

# Insert the user and verify them

    my $EncryptedPassword = crypt($Password,$Salt);
    my $UserInsert        = $dbh -> prepare(
       "insert into EmailUser (EmailUserID,Username,Password,Verified) ".
       "values                (0,          ?,       ?,       1)");
       $UserInsert -> execute($UserName,$EncryptedPassword);

# Make the user part of the group who's httpd password they've used.

    $EmailUserID =  $UserInsert -> {mysql_insertid}; # Works with MySQL only
    my $GroupID = FetchSecurityGroupByName($remote_user);
    my $EmailUserInsert = $dbh -> prepare("insert into UsersGroup (UsersGroupID,EmailUserID,GroupID) values (0,?,?)");
    if ($GroupID) {
      $EmailUserInsert -> execute($EmailUserID,$GroupID);
    }

    print "User <b>$UserName</b> created as a member of <b>$remote_user</b> group.
           Do not forget your password, there is no way to retrieve it.<p\>\n";
    $Mode = "update"; # Now display the form to update
  }
}

# Check on progress

EndPage();

# Check for valid user

if ($Password) {
  $EmailUserID = ValidateEmailUser($UserName,$Password);
} elsif ($Digest) {
  $EmailUserID = ValidateEmailUserDigest($UserName,$Digest);
} elsif ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $UserValidation eq "FNALSSO") {
  $EmailUserID = FetchEmailUserID();
}

if ($EmailUserID) {
  FetchEmailUser($EmailUserID);
  $Digest = EmailUserDigest($EmailUserID);
} elsif ($UserValidation ne "shibboleth" && $UserValidation ne "FNALSSO" ) {
  push @ErrorStack,"The username/password pair or certificate you supplied is invalid. Please try again or contact an administrator.";
  ErrorPage();
  LoginEmailUserForm();
  print "<p/>\n";
  NewEmailUserForm();
  print "<p/>\n";
  EndPage();
}

EndPage();

# Everything is OK, display the page

if ($Mode eq "update") {


# Update DB

  if ($UserValidation eq "shibboleth" or $UserValidation eq "FNALSSO") {
    require "ShibbolethUtilities.pm";
    require "FNALSSOUtilities.pm";
    if ($UserValidation eq "shibboleth") {
      $EmailUserID = FetchEmailUserIDForShib();
      $UserName = $ENV{ADFS_LOGIN};
      $Name     = $ENV{ADFS_FULLNAME};
      $Email    = $ENV{ADFS_EMAIL};
    } elsif ($UserValidation eq "FNALSSO") {
      $EmailUserID = FetchEmailUserIDForFSSO();
      $Email = $EmailAddress;
    }
    if (!$EmailUserID) {
      push @DebugStack,"Shibboleth or FNAL SSO user does not exist in EmailUser, creating";
      my $UserInsert        = $dbh -> prepare(
       "insert into EmailUser (EmailUserID,Username,Name,EmailAddress,Password,Verified) ".
       "values                (0,          ?,       ?,   ?,           ?,       1)");
      $UserInsert -> execute($FQUN,$Name,$Email,'x');
      if ($UserValidation eq "shibboleth") {
        $EmailUserID = FetchEmailUserIDForShib();
      } elsif ($UserValidation eq "FNALSSO") {
        $EmailUserID = FetchEmailUserIDForFSSO();
      }
      push @DebugStack, "Newly created EmailUserID $EmailUserID";
    }
    push @DebugStack,"Updating shibboleth or FNAL SSO EmailUserID $EmailUserID";
    my $UpdateUserInfo = $dbh -> prepare("update EmailUser set Name=?,EmailAddress=?,PreferHTML=? where EmailUserID=?");
    $UpdateUserInfo -> execute($Name,$Email,$HTML,$EmailUserID);
  } elsif ($UserValidation eq "certificate") {
    my $UpdateUserInfo = $dbh -> prepare("update EmailUser set EmailAddress=?,PreferHTML=? where EmailUserID=?");
    $UpdateUserInfo -> execute($Email,$HTML,$EmailUserID);
  } else {
    my $UpdateUserInfo = $dbh -> prepare("update EmailUser set Name=?,EmailAddress=?,PreferHTML=? where EmailUserID=?");
    $UpdateUserInfo -> execute($Name,$Email,$HTML,$EmailUserID);
  }

  if ($NewPass && $ConfNewPass && ($NewPass eq $ConfNewPass)
               && ($UserValidation ne "certificate" && $UserValidation ne "shibboleth" && $UserValidation ne "FNALSSO")) {
    srand (time ^ $$ ^ unpack "%32L*", `ps axww`);

    my $Salt = ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]).
               ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]);

    my $EncryptedPassword = crypt($NewPass,$Salt);
    my $UpdatePassword = $dbh -> prepare("update EmailUser set Password=? where EmailUserID=?");
       $UpdatePassword -> execute($EncryptedPassword,$EmailUserID);
    push @WarnStack,"Your password has been changed.";
  }

  WarnPage();

# Clear and refetch user

  $EmailUser{$EmailUserID}{EmailUserID} = 0;
  FetchEmailUser($EmailUserID);

# Out with the old, in with the new

  DeleteNotifications( {-emailuserid => $EmailUserID} );

# All Documents
  if ($ImmediateAll) {
    InsertNotifications( {-emailuserid => $EmailUserID, -type   => "AllDocuments",
                                  -ids => [1],          -period => "Immediate",} );
  }
  if ($DailyAll) {
    InsertNotifications( {-emailuserid => $EmailUserID, -type   => "AllDocuments",
                                  -ids => [1],          -period => "Daily",} );
  }
  if ($WeeklyAll) {
    InsertNotifications( {-emailuserid => $EmailUserID, -type   => "AllDocuments",
                                  -ids => [1],          -period => "Weekly",} );
  }

# Topics
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Topic",
                                -ids => \@ImmediateTopicIDs, -period => "Immediate",} );
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Topic",
                                -ids => \@DailyTopicIDs,     -period => "Daily",} );
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Topic",
                                -ids => \@WeeklyTopicIDs,    -period => "Weekly",} );

# Authors
  InsertNotifications( {-emailuserid => $EmailUserID,         -type   => "Author",
                                -ids => \@ImmediateAuthorIDs, -period => "Immediate",} );
  InsertNotifications( {-emailuserid => $EmailUserID,         -type   => "Author",
                                -ids => \@DailyAuthorIDs,     -period => "Daily",} );
  InsertNotifications( {-emailuserid => $EmailUserID,         -type   => "Author",
                                -ids => \@WeeklyAuthorIDs,    -period => "Weekly",} );

# Events
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Event",
                                -ids => \@ImmediateEventIDs, -period => "Immediate",} );
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Event",
                                -ids => \@DailyEventIDs,     -period => "Daily",} );
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Event",
                                -ids => \@WeeklyEventIDs,    -period => "Weekly",} );

# EventGroups
  InsertNotifications( {-emailuserid => $EmailUserID,             -type   => "EventGroup",
                                -ids => \@ImmediateEventGroupIDs, -period => "Immediate",} );
  InsertNotifications( {-emailuserid => $EmailUserID,             -type   => "EventGroup",
                                -ids => \@DailyEventGroupIDs,     -period => "Daily",} );
  InsertNotifications( {-emailuserid => $EmailUserID,             -type   => "EventGroup",
                                -ids => \@WeeklyEventGroupIDs,    -period => "Weekly",} );
# Keywords
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Keyword",
                           -textkeys => \@ImmediateKeywords, -period => "Immediate",} );
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Keyword",
                           -textkeys => \@DailyKeywords,     -period => "Daily",} );
  InsertNotifications( {-emailuserid => $EmailUserID,        -type   => "Keyword",
                           -textkeys => \@WeeklyKeywords,    -period => "Weekly",} );
# Individual documents
  InsertNotifications( {-emailuserid => $EmailUserID,         -type   => "Document",
                                -ids => \@ImmediateDocuments, -period => "Immediate",} );

}

# Clear (are refetched in DisplayNotification)

ClearNotifications();

print $query -> start_form('POST',$SelectEmailPrefs);
print "<div id=\"SelectEmailPrefsForm\">\n";
print $query -> hidden(-name => 'mode', -default => "update", -override => 1);

print "<table class=\"HighPaddedTable CenteredTable\"><tr><td>\n";

print "<p><b>Use this page to change your personal account settings.</b></p>
       <p> At the top part of the page, you can change
       your e-mail address, name, and whether you prefer text or HTML e-mail.
       (At the present time, all e-mail is text only, but your choice will be
       remembered for future enhancements.)
       Also shown are which group(s) you are a member of. If this list is incorrect,
       <a href=\"mailto:$DBWebMasterEmail\">contact the administrators</a> and ask them
       to change your group membership.</p>\n";
unless ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $UserValidation eq "FNALSSO") {
  print "<p>If you want to change your password, type the new password in both boxes.</p>\n";
}
print "<p>At the bottom part of the page, select the <a href=\"#topic\">topics
       or  subtopics</a>,  <a href=\"#author\">authors</a>,
       <a href=\"#event\">events</a>, or  <a href=\"#keyword\">keywords</a> you
       want to be notified of changes to, either immediately or in digests sent
       every day or week.</p>\n";
print "</td></tr></table>\n";

print "<table class=\"HighPaddedTable\">\n";
print "<tr><td colspan=\"2\">\n";
UserPrefForm($EmailUserID);
print "</td><td>";
print "<b>Current e-mail notifications:</b>\n";
print "<ul>\n";
print "<li>\n";
DisplayNotification($EmailUserID,"Immediate",$TRUE);
print "</li>\n";
print "<li>\n";
DisplayNotification($EmailUserID,"Daily",$TRUE);
print "</li>\n";
print "<li>\n";
DisplayNotification($EmailUserID,"Weekly",$TRUE);
print "</li>\n";
print "</ul>\n";
print "</td></tr></table>\n";

my @WatchDocumentIDs = @{$Notifications{$EmailUserID}{Document_Immediate}};
if (@WatchDocumentIDs) {
  print "<h4>You are watching these individual documents:</h4>\n";
}
my %FieldList = PrepareFieldList(-default => "Default");
my $NDocs = DocumentTable(-fieldlist => \%FieldList, -docids => \@WatchDocumentIDs, -sortby => 'docid');

print "<hr/><table class=\"CenteredTable\">\n";
print "<tr><td>";
print $query -> submit (-value => "Update Notification Preferences");
print " \n";
print $query -> reset (-value => "Reset");
print "</td></tr></table>\n";

print "<a name=\"topic\"/><h3>Notification by Topics</h3>\n";

print "<table class=\"HighPaddedTable\"><tr><td>\n";
TopicScroll({ -helptext   => "Immediate", -helplink => "notifytopic",
              -itemformat => "short", -multiple => $TRUE,
              -name       => "immediate_topics",
              -default    => $Notifications{$EmailUserID}{Topic_Immediate},
            });
print "</td><td>\n";
TopicScroll({ -helptext   => "Daily", -helplink => "notifytopic",
              -itemformat => "short", -multiple => $TRUE,
              -name       => "daily_topics",
              -default    => $Notifications{$EmailUserID}{Topic_Daily},
            });
print "</td><td>\n";
TopicScroll({ -helptext   => "Weekly", -helplink => "notifytopic",
              -itemformat => "short", -multiple => $TRUE,
              -name       => "weekly_topics",
              -default    => $Notifications{$EmailUserID}{Topic_Weekly},
            });
print "</td></tr><tr><td>\n";
EmailAllForm({ -name => "immediate_all", -default => $Notifications{$EmailUserID}{AllDocuments_Immediate} });
print "</td><td>";
EmailAllForm({ -name => "daily_all", -default => $Notifications{$EmailUserID}{AllDocuments_Daily} });
print "</td><td>";
EmailAllForm({ -name => "weekly_all", -default => $Notifications{$EmailUserID}{AllDocuments_Weekly} });
print "</td></tr></table>\n";

print "<hr/><a name=\"author\"/><h3>Notification by Authors</h3>\n";
print "<table class=\"HighPaddedTable\"><tr>\n";
print "<td>";
AuthorScroll(-helptext   => "Immediate", -helplink => "notifyauthor",
             -multiple => $TRUE,
             -name       => "immediate_authors",
             -default    => $Notifications{$EmailUserID}{Author_Immediate},
            );
print "</td>\n";
print "<td>";
AuthorScroll(-helptext   => "Daily", -helplink => "notifyauthor",
             -multiple => $TRUE,
             -name       => "daily_authors",
             -default    => $Notifications{$EmailUserID}{Author_Daily},
            );
print "</td>\n";
print "<td>";
AuthorScroll(-helptext   => "Weekly", -helplink => "notifyauthor",
             -multiple => $TRUE,
             -name       => "weekly_authors",
             -default    => $Notifications{$EmailUserID}{Author_Weekly},
            );
print "</td>\n";
print "</tr></table>\n";

print "<hr/><a name=\"event\"/><h3>Notification by Events</h3>\n";
print "<table class=\"HighPaddedTable\"><tr>\n";\
print "<td>",FormElementTitle(-helptext => "Immediate", -helplink => "notifyevent"),"</td>";
print "<td>";
EventGroupSelect( {-multiple => $TRUE, -name    => "immediate_eventgroups",
                   -helplink => "",    -default => $Notifications{$EmailUserID}{EventGroup_Immediate}}  );
print "</td><td>";
EventSelect(      {-multiple => $TRUE, -name    => "immediate_events",
                   -helplink => "",    -default => $Notifications{$EmailUserID}{Event_Immediate}} );
print "</td>";
print "</tr><tr>";
print "<td>",FormElementTitle(-helptext => "Daily", -helplink => "notifyevent"),"</td>";
print "<td>";
EventGroupSelect( {-multiple => $TRUE, -name => "daily_eventgroups",
                   -helplink => "",    -default => $Notifications{$EmailUserID}{EventGroup_Daily}} );
print "</td><td>";
EventSelect(      {-multiple => $TRUE, -name => "daily_events",
                   -helplink => "",    -default => $Notifications{$EmailUserID}{Event_Daily}} );
print "</td>";
print "</tr><tr>";
print "<td>",FormElementTitle(-helptext => "Weekly", -helplink => "notifyevent"),"</td>";
print "<td>";
EventGroupSelect( {-multiple => $TRUE, -name => "weekly_eventgroups",
                   -helplink => "",    -default => $Notifications{$EmailUserID}{EventGroup_Weekly}} );
print "</td><td>";
EventSelect(      {-multiple => $TRUE, -name => "weekly_events",
                   -helplink => "",    -default => $Notifications{$EmailUserID}{Event_Weekly}} );
print "</td>";
print "</tr></table>\n";


print "<hr/><a name=\"keyword\"/><h3>Notification by Keywords</h3>\n";
print "<table class=\"HighPaddedTable\">\n";
print "<tr><td>\n";
EmailKeywordForm({ -name    => "immediate_keywords", -period => "Immediate",
                   -default => $Notifications{$EmailUserID}{Keyword_Immediate}, });
print "</td></tr><tr><td>\n";
EmailKeywordForm({ -name    => "daily_keywords", -period => "Daily",
                   -default => $Notifications{$EmailUserID}{Keyword_Daily}, });
print "</td></tr><tr><td>\n";
EmailKeywordForm({ -name    => "weekly_keywords", -period => "Weekly",
                   -default => $Notifications{$EmailUserID}{Keyword_Weekly}, });
print "</td></tr></table>\n";

print "<hr/><a name=\"documents\"/><h3>Notification for Individual Documents</h3>\n";

print "<table class=\"HighPaddedTable\">\n";
print "<tr><td>\n";
TextArea(-name => "immediate_documents", -helptext => "Immediate", -helplink => "notifydocument",
         -columns => 80, -default => join ' ',sort numerically @{$Notifications{$EmailUserID}{Document_Immediate}});
print "</td></tr></table>\n";

print "<table class=\"HighPaddedTable CenteredTable\">\n";
print "<tr><td>";
print $query -> submit (-value => "Update Notification Preferences");
print " \n";
print $query -> reset (-value => "Reset");
print "</td></tr></table></div>\n";
print $query -> end_form;
print "<hr/>\n";

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

