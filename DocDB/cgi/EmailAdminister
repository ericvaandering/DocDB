#! /usr/bin/env perl

use lib ".";

#
#        Name: EmailAdminister
# Description: This script is called by EmailAdministerForm and does
#              administration on users who have signed up for email from the
#              DB. Since users can change almost everything, it really just
#              deletes users and changes their passwords in case they forget.
#              It also displays all the users and their notification
#              preferences.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified:
#

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "SecuritySQL.pm";
require "NotificationSQL.pm";
require "Messages.pm";
require "EmailUserHTML.pm";
require "SignoffSQL.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

# Parameters to script

my $Password = $Untaint -> extract(-as_printable => "password") || "";
my $Username = $Untaint -> extract(-as_printable => "admuser") || "";
my $Action = $Untaint -> extract(-as_printable => "admaction") || "";

my $EmailUserID = $Untaint -> extract(-as_integer => "emailuserid") || 0;
my $NewCertID = $Untaint -> extract(-as_integer => "newcertid") || 0;
my $SingleUser = $Untaint -> extract(-as_safehtml => "singleuser") || "";
my $NewPassword = $Untaint -> extract(-as_printable => "resetpw") || "";

my $ClearGroups   = ($Untaint -> extract(-as_printable => "cleargroups") eq "on");
my $ClearUser     = ($Untaint -> extract(-as_printable => "clearuser")   eq "on");
my $UserSign      = ($Untaint -> extract(-as_printable => "usersign")    eq "on");
my $VerifyUser    = ($Untaint -> extract(-as_printable => "verifyuser")  eq "on");
my @UsersGroupIDs = @{ $Untaint -> extract(-as_listofint => "usergroups") || undef };

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$Username,$Password);

unless ($dbh) {
  push @ErrorStack,$Msg_AdminNoConnect;
}

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader("Modified E-mail Users");

EndPage();
GetSecurityGroups();

unless (CanAdminister()) {
  push @ErrorStack,$Msg_AdminNoLogin;
}
EndPage();

if ($Action eq "Delete") { # Delete user
  my @SignoffIDs = GetSignoffIDs(-emailuserid => $EmailUserID);
  if (!$EmailUserID) {
    push @ErrorStack,$Msg_ModEUserEmpty;
  } elsif (@SignoffIDs) {
    push @ErrorStack, 'You cannot delete this account, it has signed or needs to sign documents. '.
                      'Visit the URL '."$SignatureReport?emailuserid=$EmailUserID".' to see which documents. '.
                      'You can disable this account by using Modify and checking Clear Verify and Sign '.
                      'or you can transfer this account to another and then delete it.';
  } else {
    my $UserDelete         = $dbh -> prepare("delete from EmailUser    where EmailUserID=?");
    my $UsersGroupDelete   = $dbh -> prepare("delete from UsersGroup   where EmailUserID=?");
    my $NotificationDelete = $dbh -> prepare("delete from Notification where EmailUserID=?");
    $UsersGroupDelete   -> execute($EmailUserID);
    $NotificationDelete -> execute($EmailUserID);
    $UserDelete         -> execute($EmailUserID);

    my @NotifyTimes = ("Immediate","Daily","Weekly");
    my @NotifyTypes = ("Author","Keyword","Topic");
    foreach my $NotifyType (@NotifyTypes) {  # Loop over all tables and delete
      foreach my $NotifyTime (@NotifyTimes) {
        my $Table = "Email$NotifyType$NotifyTime";
        my $NotifyDelete = $dbh -> prepare("delete from $Table where EmailUserID=?");
           $NotifyDelete -> execute($EmailUserID);
      }
    }
    push @ActionStack,"The user was deleted.";
  }
  ActionReport();
} elsif ($Action eq "Modify") {
  push @DebugStack, "Changing info for EmailUserID $EmailUserID";
  unless ($EmailUserID) { # Deal with password changes
    push @ErrorStack,$Msg_ModEUserEmpty;
  }
  EndPage();

  FetchEmailUser($EmailUserID);
  push @DebugStack, "Changing info for $EmailUser{$EmailUserID}{Username}";

  if ($NewPassword) {
    srand (time ^ $$ ^ unpack "%32L*", `ps -eaf`);

    my $Salt = ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]).
               ((0..9,'a'..'z','A'..'Z','.','/')[(int rand (64))]);

    my $EncryptedPassword = crypt($NewPassword,$Salt);
    my $UserUpdate = $dbh -> prepare("update EmailUser set Password=? where EmailUserID=?");
       $UserUpdate -> execute($EncryptedPassword,$EmailUserID);
    push @ActionStack,"The user's password was changed. They should change it again ASAP.";
  }
  if ($ClearGroups || $SingleUser) {
    my $UsersGroupDelete = $dbh -> prepare("delete from UsersGroup where EmailUserID=?");
       $UsersGroupDelete -> execute($EmailUserID);
    push @ActionStack,"All associations between the user and groups have been deleted.";
  }
  if ($ClearUser || $SingleUser) {
    my $UserUpdate = $dbh -> prepare("update EmailUser set CanSign=0,Verified=0 where EmailUserID=?");
       $UserUpdate -> execute($EmailUserID);
    unless ($SingleUser) {
      push @ActionStack,"The user is no longer verified and cannot sign documents.";
    }
  }
  if ($UserSign) {
    my $UserUpdate = $dbh -> prepare("update EmailUser set CanSign=1 where EmailUserID=?");
       $UserUpdate -> execute($EmailUserID);
    push @ActionStack,"The user may sign documents.";
  }
  if ($VerifyUser) {
    my $UserUpdate = $dbh -> prepare("update EmailUser set Verified=1 where EmailUserID=?");
       $UserUpdate -> execute($EmailUserID);
    push @ActionStack,"The user is verified.";
    push @DebugStack, "Verifying user";
    if ($MailInstalled && $UserValidation ne "basic-user" && $EmailUser{$EmailUserID}{EmailAddress}) {
      push @DebugStack, "Sending verification mail to user and admin";
      require "EmailUtilities.pm";

      my @To      = ($EmailUser{$EmailUserID}{EmailAddress},$DBWebMasterEmail);
      my $Subject = "DocDB account for $EmailUser{$EmailUserID}{Name} activated";
      my $Body = "An administrator has approved a request for access to DocDB or ";
      $Body .= "made a change (such as changing group memberships) to your $Project DocDB account. ";
      $Body .= "If you think this was done in error or have questions, please contact $DBWebMasterEmail.";
      SendEmail(-body => $Body, -to => \@To, -subject => $Subject);
    }
  }
  foreach my $UsersGroupID (@UsersGroupIDs) {
    my $UsersGroupSelect = $dbh -> prepare("select UsersGroupID from UsersGroup where EmailUserID=? and GroupID=?");
       $UsersGroupSelect -> execute($EmailUserID,$UsersGroupID);
    my ($ComboExists) = $UsersGroupSelect -> fetchrow_array;
    unless ($ComboExists) {
      my $UsersGroupUpdate = $dbh -> prepare("insert into UsersGroup (UsersGroupID,EmailUserID,GroupID) ".
                                             " values (0,?,?)");
      if ($UsersGroupID) {
        $UsersGroupUpdate -> execute($EmailUserID,$UsersGroupID);
      }
      FetchSecurityGroup($UsersGroupID);
      push @ActionStack,"Added user to $SecurityGroups{$UsersGroupID}{NAME}";
    }
  }

  push @DebugStack, "Clearing all EmailUsers";
  ClearEmailUsers();
  FetchEmailUser($EmailUserID);
  push @DebugStack, "Got info for EmailUserID $EmailUserID, $EmailUser{$EmailUserID}{Username}";
  ActionReport();

  print "<h3>The user now has the following information:</h3>";
  print "<table class=\"LowPaddedTable\">\n";
  PrintEmailUserInfo($EmailUserID);
  print "</table>\n";

} elsif ($Action eq "Transfer") {

  # Consolidate certificates starting with basic settings

  if ($NewCertID && $EmailUserID && $NewCertID != $EmailUserID) {
    TransferEmailUserSettings( {-oldemailuserid => $EmailUserID, -newemailuserid => $NewCertID} );

    # Print the new user info
    ClearEmailUsers();
    FetchEmailUser($EmailUserID);
    FetchEmailUser($NewCertID);
    ActionReport();

    print "<h3>The new user now has the following information:</h3>";
    print "<table class=\"LowPaddedTable\">\n";
    PrintEmailUserInfo($NewCertID, $TRUE);
    print "</table>\n";

    if ($MailInstalled
        && ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $UserValidation eq "FNALSSO")) {
      require "EmailUtilities.pm";

      my @To = ($EmailUser{$EmailUserID}{EmailAddress}, $EmailUser{$NewCertID}{EmailAddress},$DBWebMasterEmail);
      my $Subject = "DocDB account for $EmailUser{$NewCertID}{Name} updated";
      my $Body = "An administrator has transferred permissions from ";
      $Body .= "account $EmailUser{$EmailUserID}{Username} to ";
      $Body .= "account $EmailUser{$NewCertID}{Username} for access to $Project DocDB. ";
      $Body .= "If you think this was done in error or have questions, please contact $DBWebMasterEmail.";
      SendEmail(-body => $Body, -to => \@To, -subject => $Subject);
    }


  } else { # End of certificate consolidation
    push @ErrorStack,"You must select an old and new user (which must be different) to transfer settings and permissions.";
  }
} elsif ($Action eq "New") {
  push @ErrorStack,"You can't create new users here. Do it the normal way.";
} else {
  push @ErrorStack,"No valid action was specified.";
}

EndPage();
WarnPage();

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
