#! /usr/bin/env perl

use lib ".";

#
# Author Eric Vaandering (ewv@fnal.gov)
#
# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# Get DocumentIDs of documents user has signed

#select DocumentRevision.DocumentID from Signature,Signoff,DocumentRevision
#where Signature.EmailUserID=? and Signoff.SignoffID=Signature.SignoffID and
#Signoff.DocRevID=DocumentRevision.DocRevID and Signature.Signed=1

# Get DocumentIDs of documents user hasn't signed

#select DocumentRevision.DocumentID from Signature,Signoff,DocumentRevision
#where Signature.EmailUserID=1 and Signoff.SignoffID=Signature.SignoffID and
#Signoff.DocRevID=DocumentRevision.DocRevID and Signature.Signed=0

use Benchmark;
use CGI;
use CGI::Untaint;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";

require "SignoffSQL.pm";
require "NotificationSQL.pm";

require "ResponseElements.pm";
require "DocumentHTML.pm";

require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "RevisionUtilities.pm";
require "SignoffUtilities.pm";
require "Utilities.pm";
require "DocumentUtilities.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

my $EmailUserID = $Untaint -> extract(-as_integer => "emailuserid") || 0;

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

&FetchEmailUser($EmailUserID);

my @Scripts = ("jquery/jquery-3.0.0.min","jquery/jquery.tablesorter.min","jquery/jquery.tablesorter.widgets");
@JQueryElements = ("tablesorter");
push @Scripts,"JQueryReady";

### Start HTML

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader("Signature Report for $EmailUser{$EmailUserID}{Name}", "", -scripts => \@Scripts, -jqueryelements => \@JQueryElements);

&EndPage(@ErrorStack);

my @DocumentIDs = &GetSignoffDocumentIDs(-emailuserid => $EmailUserID);
my @SignoffIDs  = &GetSignoffIDs(-emailuserid => $EmailUserID);

my @ReadyDocumentIDs        = (); # Ready for persons signature
my @NotReadyDocumentIDs     = (); # Signature ready in future
my @ApprovedDocumentIDs     = (); # Fully approved documents
my @SignedDocumentIDs       = (); # Signed but not approved
my @OldSignatureDocumentIDs = (); # No signature on current version

foreach my $SignoffID (@SignoffIDs) {
  $SignoffID = &FetchSignoff($SignoffID);
  if ($SignoffID) {
    my $DocRevID = $Signoffs{$SignoffID}{DocRevID};
    if (&RevisionIsLatest($DocRevID)) {
      &FetchDocRevisionByID($DocRevID);
      my $DocumentID = $DocRevisions{$DocRevID}{DOCID};
      my $Status = &SignoffStatus ($SignoffID);
      if ($Status eq "Ready") {
        push @ReadyDocumentIDs,$DocumentID;
      } elsif ($Status eq "NotReady") {
        push @NotReadyDocumentIDs,$DocumentID;
      } elsif ($Status eq "Signed") {
        my ($RevisionStatus) = &RevisionStatus($DocRevID);
        if ($RevisionStatus eq "Approved") {
          push @ApprovedDocumentIDs,$DocumentID;
        } elsif ($RevisionStatus eq "Unapproved") {
          push @SignedDocumentIDs,$DocumentID;
        }
      }
    }
  }
}

my @CurrentDocumentIDs = (@ReadyDocumentIDs ,@NotReadyDocumentIDs,@ApprovedDocumentIDs,@SignedDocumentIDs);
@OldSignatureDocumentIDs = RemoveArray(\@DocumentIDs,@CurrentDocumentIDs);

if (@ReadyDocumentIDs) {
  print "<center><h4>These documents are ready to be signed by $EmailUser{$EmailUserID}{Name}:</h4></center><p>\n";

  my %FieldList = PrepareFieldList(-fields => ["Docid","Title","Author","Updated"]);
  DocumentTable(-fieldlist => \%FieldList,
                -docids    => \@ReadyDocumentIDs,
                -sortby    => "date", -reverse => 1);
}

if (@NotReadyDocumentIDs) {
  print "<center><h4>These documents may require a future signature by $EmailUser{$EmailUserID}{Name}:</h4></center><p>\n";

  my %FieldList = PrepareFieldList(-fields => ["Docid","Title","CanSign","Updated"]);
  DocumentTable(-fieldlist => \%FieldList,
                -docids    => \@NotReadyDocumentIDs,
                -sortby    => "date", -reverse => 1);
}

if (@SignedDocumentIDs) {
  print "<center><h4>These documents are signed by $EmailUser{$EmailUserID}{Name}, but not approved:</h4></center><p>\n";

  my %FieldList = PrepareFieldList(-fields => ["Docid","Title","CanSign","Updated"]);
  DocumentTable(-fieldlist => \%FieldList,
                -docids    => \@SignedDocumentIDs,
                -sortby    => "date", -reverse => 1);
}

if (@ApprovedDocumentIDs) {
  print "<center><h4>These approved documents are signed by $EmailUser{$EmailUserID}{Name}:</h4></center><p>\n";

  my %FieldList = PrepareFieldList(-fields => ["Docid","Title","Author","Updated"]);
  DocumentTable(-fieldlist => \%FieldList,
                -docids    => \@ApprovedDocumentIDs,
                -sortby    => "date", -reverse => 1);
}

if (@OldSignatureDocumentIDs) {
  print "<center><h4>Previous versions of these documents needed to be signed by $EmailUser{$EmailUserID}{Name}:</h4></center><p>\n";

  my %FieldList = PrepareFieldList(-fields => ["Docid","Title","Author","Updated"]);
  DocumentTable(-fieldlist => \%FieldList,
                -docids    => \@OldSignatureDocumentIDs,
                -sortby    => "date", -reverse => 1);
}

$EndTime  = new Benchmark;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
