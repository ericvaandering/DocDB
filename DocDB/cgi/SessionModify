#! /usr/bin/env perl

use lib ".";

#
#        Name: $RCSfile$
# Description: Add talks to sessions of a meeting. Calls itself. In future,
#              might also be allowed to modify certain aspects of the session.
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2018 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "Messages.pm";
require "Cookies.pm";
require "Defaults.pm";

require "Sorts.pm";
require "Scripts.pm";
require "Security.pm";
require "Utilities.pm";

require "EventUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "MeetingSecurityUtilities.pm";
require "TalkHintUtilities.pm";
require "WebUtilities.pm";

require "FormElements.pm";
require "ResponseElements.pm";
require "MeetingHTML.pm";
require "SecurityHTML.pm";

require "TalkHTML.pm";
require "MeetingSQL.pm";
require "TalkHintSQL.pm";
require "TalkSQL.pm";

require "TopicSQL.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);

&GetPrefsCookie;
&SetAuthorMode;

### Gather parameters

my $Untaint = CGI::Untaint -> new($query -> Vars);
$query -> delete_all(); # Stop program from caching variable from script to script

my $SessionID = $Untaint -> extract(-as_integer => "sessionid") || 0;
my $Mode = $Untaint -> extract(-as_safehtml => "mode") || "";
my $SingleSession = $Untaint -> extract(-as_safehtml => "singlesession") || "";

my $SessionTitle = $Untaint -> extract(-as_safehtml => "sessiontitle") || "";
my $SessionDescription = $Untaint -> extract(-as_safehtml => "sessiondescription") || "";
my $SessionLocation = $Untaint -> extract(-as_safehtml => "sessionlocation") || "";
my $SessionAltLocation = $Untaint -> extract(-as_safehtml => "sessionaltlocation") || "";
my $ShowAllTalks = $Untaint -> extract(-as_safehtml => "meetshowall") || "";
if ($ShowAllTalks) {
  $ShowAllTalks = $TRUE;
}

my $SessionDay = $Untaint -> extract(-as_integer => "sessionday") || 0;
my $SessionMonth = $Untaint -> extract(-as_safehtml => "sessionmonth") || "";
my $SessionYear = $Untaint -> extract(-as_integer => "sessionyear") || 0;
my $SessionHour = $Untaint -> extract(-as_safehtml => "sessiontime") || "";

my @SessionOrderIDs = @{ $Untaint -> extract(-as_listofhtml => "sessionorderid") || undef };
my @TalkOrders = @{ $Untaint -> extract(-as_listofhtml => "talkorder") || undef };
my @TalkTitles = @{ $Untaint -> extract(-as_listofhtml => "talktitle") || undef };
my @TalkNotes = @{ $Untaint -> extract(-as_listofhtml => "talknote") || undef };
my @TalkTimes = @{ $Untaint -> extract(-as_listofhtml => "talktime") || undef };
my @TalkSeparators = @{ $Untaint -> extract(-as_listofhtml => "talkseparator") || undef };
my @TalkDeletes = @{ $Untaint -> extract(-as_listofhtml => "talkdelete") || undef };
my @TalkConfirms = @{ $Untaint -> extract(-as_listofhtml => "talkconfirm") || undef };
my @TalkReserves = @{ $Untaint -> extract(-as_listofhtml => "talkreserve") || undef };
my @TimeStamps = @{ $Untaint -> extract(-as_listofhtml => "timestamp") || undef };

# For single session mode

my $EventID = $Untaint -> extract(-as_integer => "eventid") || 0;
my $Location = $Untaint -> extract(-as_safehtml => "location") || "";
my $AltLocation = $Untaint -> extract(-as_safehtml => "altlocation") || "";
my $URL = $Untaint -> extract(-as_safehtml => "url") || "";
my $EventGroupID = $Untaint -> extract(-as_integer => "eventgroups") || 0;
my $Short = $Untaint -> extract(-as_safehtml => "shortdesc") || "";
my $Long = $Untaint -> extract(-as_safehtml => "long") || "";
my @MeetingViewGroupIDs = @{ $Untaint -> extract(-as_listofint => "meetingviewgroups") || undef };
my @MeetingModifyGroupIDs = @{ $Untaint -> extract(-as_listofint => "meetingmodifygroups") || undef };
my @TopicIDs = @{ $Untaint -> extract(-as_listofint => "topics") || undef };
my @ModeratorIDs = @{ $Untaint -> extract(-as_listofint => "moderators") || undef };

unless ($Long) {$Long = $Short;}

# Also have params for DocID, authors, and topics in special params with
# SessionID embedded

# Repack checkboxes into hashes

my %TalkDeleteFlags = ();
foreach my $TalkDelete (@TalkDeletes) {
  $TalkDeleteFlags{$TalkDelete} = 1;
}
my %TalkSeparatorFlags = ();
foreach my $TalkSeparator (@TalkSeparators) {
  $TalkSeparatorFlags{$TalkSeparator} = 1;
}
my %TalkConfirmFlags = ();
foreach my $TalkConfirm (@TalkConfirms) {
  $TalkConfirmFlags{$TalkConfirm} = 1;
}
my %TalkReserveFlags = ();
foreach my $TalkReserve (@TalkReserves) {
  $TalkReserveFlags{$TalkReserve} = 1;
}

### Start of HTML

$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

unless ($dbh) {
  push @ErrorStack,$Msg_NoConnect;
}

print $query -> header( -charset => $HTTP_ENCODING );
my $Title       = "";
my $ButtonTitle = "";
if ($SingleSession && $Mode eq "new") {
  $Title = "Create a New Event";
  $ButtonTitle = "Create Event and Talks";
} else {
  $Title       = "Modify a Session";
  if ($SingleSession) {
    $ButtonTitle = "Modify Event and Talks";
  } else {
    $ButtonTitle = "Modify Session and Talks";
  }
}
DocDBHeader($Title,"",-scripts => ["PopUps"]);

EndPage();

### Check parameters

if ($SessionID) {
  &FetchSessionByID($SessionID);
  my $ConferenceID = $Sessions{$SessionID}{ConferenceID};
  unless (&CanModifyMeeting($ConferenceID)) {
    push @ErrorStack,$Msg_MeetNoModify;
  }
} elsif (($Mode eq "create" || $Mode eq "new")  && $SingleSession) {
  unless (&CanCreateMeeting()) {
    push @ErrorStack,$Msg_MeetNoCreate;
  }
  if ($Mode eq "create") {
    unless ($Short) {
      push @ErrorStack,$Msg_TopicNoShort;
    }
    if ($URL && !(&ValidURL($URL))) {
      push @ErrorStack,"The URL $URL is not valid.";
    }
    unless ($EventGroupID) {
      push @ErrorStack,"You must select a group for this event.";
    }
    unless ($SessionDay && $SessionMonth && $SessionYear && &ValidDate($SessionDay,$ReverseAbrvMonth{$SessionMonth},$SessionYear)) {
      push @ErrorStack,"The event starting date is not valid.";
    }
  }
} elsif ($EventID) {
  unless (&CanModifyMeeting($EventID)) {
    push @ErrorStack,$Msg_MeetNoModify;
  }
  unless (&SessionCountByEventID($EventID) == 1) {
    push @ErrorStack,$Msg_MeetOnlyOne
  }
} else {
  push @ErrorStack,"You must specify a session or event to modify. You probably arrived
  here by error.";
}

GetTopics();

EndPage();

if ($SingleSession && $EventID) { # Grab single session ID in single session mode
  ($SessionID) = &FetchSessionsByConferenceID($EventID);
}

unless ($EventID) {
  &FetchSessionByID($SessionID);
  $EventID = $Sessions{$SessionID}{ConferenceID};
}

### Do DB updates and inserts

if ($Mode eq "modify" || $Mode eq "create") {
  require "MeetingSecuritySQL.pm";

  my $SessionDate = "$SessionYear-$ReverseAbrvMonth{$SessionMonth}-$SessionDay $SessionHour:00";

  if ($SingleSession && $Mode eq "create") { # Make an event, then a session, pass variables out
    $EventID = InsertEvent({
        -eventgroupid     => $EventGroupID,         -location         => $Location,
        -url              => $URL,                  -startdate        => $SessionDate,
        -enddate          => $SessionDate,          -shortdescription => $Short,
        -longdescription  => $Long,                 -altlocation      => $AltLocation,
        -showalltalks     => 1,
        -topicids         => \@TopicIDs,            -moderatorids     => \@ModeratorIDs ,
        -viewgroupids     => \@MeetingViewGroupIDs, -modifygroupids   => \@MeetingModifyGroupIDs, });
    $SessionID = InsertSession({ -eventid  => $EventID,   -date         => $SessionDate,
                                 -title    => $Short,     -description  => $SessionDescription,
                                 -topicids => \@TopicIDs, -moderatorids => \@ModeratorIDs ,
                                 -location => $Location,  -altlocation  => $AltLocation, });
    InsertMeetingOrder(-sessionid => $SessionID);
    push @ActionStack,"Created new event: $Short";
  } elsif ($SingleSession && $Mode eq "modify") {
    UpdateEvent({
        -eventid          => $EventID,              -eventgroupid    => $EventGroupID,
        -location         => $Location,             -url             => $URL,
        -startdate        => $SessionDate,          -enddate         => $SessionDate,
        -shortdescription => $Short,                -longdescription => $Long,
        -altlocation      => $AltLocation,          -showalltalks    => 1,
        -topicids         => \@TopicIDs,            -moderatorids    => \@ModeratorIDs ,
        -viewgroupids     => \@MeetingViewGroupIDs, -modifygroupids  => \@MeetingModifyGroupIDs, });
    UpdateSession({ -sessionid => $SessionID, -date         => $SessionDate,
                    -title     => $Short,     -description  => $SessionDescription,
                    -topicids  => \@TopicIDs, -moderatorids => \@ModeratorIDs ,
                    -location  => $Location,  -altlocation  => $AltLocation, });
    my $MeetingOrderUpdate = $dbh -> prepare(
         "update MeetingOrder set SessionOrder=1 where SessionID=?");
    $MeetingOrderUpdate -> execute($SessionID);
    push @ActionStack,"Modified event: $Short";
  } else {

  # Update Session parameters, refetch

    UpdateSession({ -sessionid => $SessionID,       -date         => $SessionDate,
                    -title     => $SessionTitle,    -description  => $SessionDescription,
                    -topicids  => \@TopicIDs,       -moderatorids => \@ModeratorIDs ,
                    -location  => $SessionLocation, -altlocation  => $SessionAltLocation,
                    -showalltalks => $ShowAllTalks, });
    push @ActionStack,"Modified session: $SessionTitle";
  }
  ClearSessions();
  FetchSessionByID($SessionID);

  my %TalkOrders = (); # Re-sort talk orders
  {
    foreach my $TalkOrder (@TalkOrders) {
      $TalkOrders{$TalkOrder} = $TalkOrder;
    }
    my @OrderedOrders = sort numerically @TalkOrders;

    my $NewOrder = 1;
    foreach my $TalkOrder (@OrderedOrders) {
      $TalkOrders{$TalkOrder} = $NewOrder;
      ++$NewOrder;
    }
  }

# Loop over sessions and insert
  FetchSessionOrdersBySessionID($SessionID);

  my $TalksUpdated    = 0;

  foreach my $TalkOrder (@TalkOrders) {
    my $TalkTime       = shift @TalkTimes       ;
    my $TalkTitle      = shift @TalkTitles      ;
    my $TalkNote       = shift @TalkNotes       ;
    my $SessionOrderID = shift @SessionOrderIDs ;
    my $TimeStamp      = shift @TimeStamps      ;
    my $TalkNewOrder   = $TalkOrders{$TalkOrder};

    my $TalkSeparatorID = 0;
    my $SessionTalkID   = 0;

    my $TalkConfirmed   = $TalkConfirmFlags{$SessionOrderID};
    my $TalkReserve     = $TalkReserveFlags{$SessionOrderID};
    my $TalkDocID = $Untaint -> extract(-as_integer => "talkdocid-$SessionOrderID") || 0;
    my $NewSessionID = $Untaint -> extract(-as_integer => "newsessionid-$SessionOrderID") || 0;

    my @TopicHints = @{ $Untaint -> extract(-as_listofint => "topics-$SessionOrderID") || undef };
    my @AuthorHints = @{ $Untaint -> extract(-as_listofint => "authors-$SessionOrderID") || undef };
    my $AuthorText = $Untaint -> extract(-as_safehtml => "authortext-$SessionOrderID") || "";
    if (!@AuthorHints && $AuthorText) {
      require "AuthorSQL.pm";
      @AuthorHints = ProcessManualAuthors($AuthorText);
    }

    if (grep /n/,$SessionOrderID) { # Key on SessionOrderID to see if insert or update.
      if ($TalkTitle || $TalkNote || $TalkDocID) { # Insert
	++$TalksUpdated;
	if ($TalkSeparatorFlags{$SessionOrderID}) {
          my $TalkSeparatorInsert = $dbh -> prepare(
           "insert into TalkSeparator ".
           "(TalkSeparatorID, SessionID, Time, Title, Note) ".
           "values (0,?,?,?,?)");
          $TalkSeparatorInsert -> execute($SessionID,$TalkTime,$TalkTitle,$TalkNote);
          $TalkSeparatorID = $TalkSeparatorInsert -> {mysql_insertid}; # Works with MySQL only
          push @ActionStack,"Added break to agenda: $TalkTitle";
	} else {
          my $TalkInsert = $dbh -> prepare(
           "insert into SessionTalk ".
           "(SessionTalkID, SessionID, DocumentID, Confirmed, Time, HintTitle, Note) ".
           "values (0,?,?,?,?,?,?)");
          $TalkInsert          -> execute($SessionID,$TalkDocID,$TalkConfirmed,$TalkTime,$TalkTitle,$TalkNote);
          $SessionTalkID = $TalkInsert -> {mysql_insertid}; # Works with MySQL only
          if ($TalkConfirmed) {
            ConfirmTalk(-docid => $TalkDocID, -sessiontalkid => $SessionTalkID, -eventid => $EventID);
          }
          $NewSessionTalkMap{$TalkOrder} = $SessionTalkID;
          InsertTopicHints($SessionTalkID,@TopicHints);
          InsertAuthorHints($SessionTalkID,@AuthorHints);
          push @ActionStack,"Added item to agenda: $TalkTitle";
	}
        my $SessionOrderInsert = $dbh -> prepare(
         "insert into SessionOrder ".
         "(SessionOrderID, TalkOrder, SessionTalkID, TalkSeparatorID) ".
         "values (0,?,?,?)");
	$SessionOrderInsert -> execute($TalkNewOrder,$SessionTalkID,$TalkSeparatorID);
      } # End of Insert
    } else {
      $TalkSeparatorID = $SessionOrders{$SessionOrderID}{TalkSeparatorID};
      $SessionTalkID   = $SessionOrders{$SessionOrderID}{SessionTalkID};

### Check TimeStamps from form vs. DB to detect collisions

      if ($SessionTalkID) {
        FetchSessionTalkByID($SessionTalkID);
        if ($TimeStamp < $SessionTalks{$SessionTalkID}{TimeStamp}) {
          push @WarnStack,"Someone else modifed $TalkTitle while you were working.
                          If you tried to modify $TalkTitle too, your modifications
                          have been discarded.";
          next;
        }
      }
      if ($TalkSeparatorID) {
        FetchTalkSeparatorByID($TalkSeparatorID);
        if ($TimeStamp < $TalkSeparators{$TalkSeparatorID}{TimeStamp}) {
          push @WarnStack,"Someone else modifed $TalkTitle while you were working.
                          If you tried to modify $TalkTitle too, your modifications
                          have been discarded.";
          next;
        }
      }

      if ($TalkDeleteFlags{$SessionOrderID}) { # Delete session or separator
        if ($TalkSeparatorID) {
          DeleteTalkSeparator($TalkSeparatorID);
          push @ActionStack,"Deleted break from agenda";
        } elsif ($SessionTalkID) {
          DeleteSessionTalk($SessionTalkID);
          push @ActionStack,"Deleted item from agenda";
        }
      } elsif ($TalkTitle || $TalkNote || $TalkDocID) { # We will modify existing talks
	++$TalksUpdated;

        if ($TalkSeparatorID) { # Modify a talk separator
          my $TalkSeparatorUpdate = $dbh -> prepare(
           "update TalkSeparator set ".
           "Time=?, Title=?, Note=? ".
           "where TalkSeparatorID=?");
          $TalkSeparatorUpdate -> execute($TalkTime,$TalkTitle,$TalkNote,$TalkSeparatorID);
          if ($NewSessionID) { # Move to new session
            my $TalkSeparatorMove = $dbh -> prepare(
             "update TalkSeparator set SessionID=? where TalkSeparatorID=?");
            $TalkSeparatorMove -> execute($NewSessionID,$TalkSeparatorID);
          }
          push @ActionStack,"Modified break: $TalkTitle";
        } elsif ($SessionTalkID) { # Modify a talk
          my $SessionTalkUpdate = $dbh -> prepare(
           "update SessionTalk set ".
           "DocumentID=?, Confirmed=?, Time=?, HintTitle=?, Note=? ".
           "where SessionTalkID=?");
          $SessionTalkUpdate -> execute($TalkDocID,$TalkConfirmed,$TalkTime,$TalkTitle,$TalkNote,$SessionTalkID);
          if ($TalkConfirmed) {
            ConfirmTalk(-docid => $TalkDocID, -sessiontalkid => $SessionTalkID, -eventid => $EventID);
          }
          InsertTopicHints($SessionTalkID,@TopicHints);
          InsertAuthorHints($SessionTalkID,@AuthorHints);
          if ($NewSessionID) { # Move to new session
            my $SessionTalkMove = $dbh -> prepare(
             "update SessionTalk set SessionID=? where SessionTalkID=?");
            $SessionTalkMove -> execute($NewSessionID,$SessionTalkID);
            push @ActionStack,"Moved item to another session: $TalkTitle";
          } else {
            push @ActionStack,"Modified agenda item: $TalkTitle";
          }
        }

        my $SessionOrderUpdate = $dbh -> prepare(
         "update SessionOrder set TalkOrder=? where SessionOrderID=?");
        $SessionOrderUpdate -> execute($TalkNewOrder,$SessionOrderID);
      }
    }

### Reserve document if reserve checked
    if ($TalkReserve) {
      if ($SessionTalkID && !$TalkConfirmed && @AuthorHints) {
        require "DocumentUtilities.pm";
        require "MiscSQL.pm";
        my $TypeID = FetchDocTypeByName("Talk") || 1;
        my ($NewDocumentID,$NewDocRevID)
          = AddDocument({-version     => "reserve",     -title       => $TalkTitle,
                        -typeid      => $TypeID,       -requesterid => @AuthorHints[0],
                        -authorids   => \@AuthorHints, -topicids    => \@TopicHints,
                        -eventids    => [$EventID],    -viewids     => \@MeetingViewGroupIDs,
                        -modifyids   => \@MeetingViewGroupIDs});
        push @ActionStack,"Reserved document # $NewDocumentID with title $TalkTitle";
        my $SessionTalkUpdate = $dbh -> prepare(
           "update SessionTalk set DocumentID=?,Confirmed=? where SessionTalkID=?");
        $SessionTalkUpdate -> execute($NewDocumentID,1,$SessionTalkID);
      } else {
        push @WarnStack,"You cannot reserve a document if there is a confirmed document already or if you don't specify authors.";
      }
    }
  }
}

EndPage(@ErrorStack);
WarnPage(@WarnStack);
ActionReport();

### Prepare to display form (get required info)

ClearSessionTalks();
ClearSessions();
ReHintTalksBySessionID($SessionID);
ClearSessionTalks();

# Fetch all SessionTalks and TalkSeparators with this SessionID

my @SessionTalkIDs   = FetchSessionTalksBySessionID($SessionID);
my @TalkSeparatorIDs = FetchTalkSeparatorsBySessionID($SessionID);
my @SessionOrderIDs  = FetchSessionOrdersBySessionID($SessionID);

# Sort talks and separators

@SessionOrderIDs = sort SessionOrderIDByOrder @SessionOrderIDs;

my $SessionDefaultTitle        = $Sessions{$SessionID}{Title};
my $SessionDefaultDescription  = $Sessions{$SessionID}{Description};
my $SessionDefaultLocation     = $Sessions{$SessionID}{Location};
my $SessionDefaultAltLocation  = $Sessions{$SessionID}{AltLocation};
my $SessionDefaultDateTime     = $Sessions{$SessionID}{StartTime};
my $SessionDefaultShowAllTalks = $Sessions{$SessionID}{ShowAllTalks};
my @DefaultModeratorIDs        = @{$Sessions{$SessionID}{Moderators}};
my @DefaultTopicIDs            = @{$Sessions{$SessionID}{Topics}};

# Defaults for SingleSessionMode;
my @MeetingModifyDefaults = ();
my @MeetingViewDefaults   = ();
my $DefaultShortDescription;
my $DefaultLongDescription;
my $DefaultEventLocation;
my $DefaultEventAltLocation;
my $DefaultEventURL;
my $DefaultEventGroupID;

if ($SingleSession) {
  require "MeetingSecuritySQL.pm";
  require "SQLUtilities.pm";

  my ($DefaultEventTime,$DefaultEventDate);
  if ($Mode eq "new") {
    $DefaultEventTime = "9:00:00";
    if ($SessionDay && $SessionMonth && $SessionYear) {
      $DefaultEventDate = "$SessionYear-$SessionMonth-$SessionDay";
    } else {
      $DefaultEventDate = &SQLNow(-dateonly => $TRUE);
    }
    my @UsersGroups = FindUsersGroups();
    unless ($DefaultPublicAccess) {
      @MeetingViewDefaults = @UsersGroups;
    }
    @MeetingModifyDefaults = @UsersGroups;
    $SessionDefaultDateTime = "$DefaultEventDate $DefaultEventTime";
  } elsif ($EventID) {
    &FetchConferenceByConferenceID($EventID);
    $DefaultEventGroupID  = $Conferences{$EventID}{EventGroupID};
    $DefaultShortDescription = $Conferences{$EventID}{Title};
    $DefaultLongDescription  = $Conferences{$EventID}{LongDescription};
    $DefaultEventLocation    = $Conferences{$EventID}{Location};
    $DefaultEventAltLocation = $Conferences{$EventID}{AltLocation};
    $DefaultEventURL         = $Conferences{$EventID}{URL};
    foreach my $MeetingViewID (&GetMeetingSecurityGroups($EventID)) {
      my $GroupID = $MeetingSecurities{$MeetingViewID}{GroupID};
      push @MeetingViewDefaults,$GroupID;
    }
    foreach my $MeetingModifyID (&GetMeetingModifyGroups($EventID)) {
      my $GroupID = $MeetingModify{$MeetingModifyID}{GroupID};
      push @MeetingModifyDefaults,$GroupID;
    }
  }
}

print "<h4>You can make more modifications, modify the agenda, or
       <a href=\"$DisplayMeeting?conferenceid=$EventID\">Display
       the Event</a>. Click a <span class=\"Help\">highlighted</span> link or
       read the <a href=\"$DocDBInstructions?set=event\">instructions</a> for
       help. Required fields are denoted by $RequiredMark.</h4>\n";

### Display form

print $query -> start_multipart_form('POST',"$SessionModify");
print "<div class=\"SessionEntryForm\">\n";
if ($SingleSession && $Mode eq "new") {
  $query -> param('mode','create');
  print $query -> hidden(-name => 'singlesession', -default => 1);
  print $query -> hidden(-name => 'mode',          -default => "create");
} elsif ($SingleSession) {
  $query -> param('sessionid',$SessionID);
  $query -> param('mode','modify');
  print $query -> hidden(-name => 'singlesession', -default => 1);
  print $query -> hidden(-name => 'sessionid',     -default => $SessionID);
  print $query -> hidden(-name => 'mode',          -default => 'modify');
} else {
  $query -> param('sessionid',$SessionID);
  $query -> param('mode','modify');
  print $query -> hidden(-name => 'sessionid',     -default => $SessionID);
  print $query -> hidden(-name => 'mode',          -default => 'modify');
}

print '<table class="HighPaddedTable CenteredTable">';
if ($SingleSession) {
  my %RequiredEntries = ();
     $RequiredEntries{StartDate}        = $TRUE;
     $RequiredEntries{EndDate}          = $FALSE;
     $RequiredEntries{LongDescription}  = $FALSE; # Can get from ShortDescription
     $RequiredEntries{ShortDescription} = $TRUE;
     $RequiredEntries{EventGroup}       = $TRUE;

  print "<tr>\n";
  print "<td>\n";
  EventGroupSelect( {-required => $RequiredEntries{EventGroup}, -helptext => "Event Group",
                     -default  => [$DefaultEventGroupID], -size => 8 });
  print "</td>\n";
  print "<td rowspan=\"2\">\n";
  ShortDescriptionBox(-name      => "shortdesc", -helptext => "Short Description",
                      -required  => $RequiredEntries{ShortDescription},
                      -maxlength => 128, -default => $DefaultShortDescription);
  LongDescriptionBox(-required  => $RequiredEntries{LongDescription},
                     -maxlength => 400,  -default => $DefaultLongDescription);
  print "<div>\n";
  DateTimePulldown(-name    => "session", -helptext => "Start Date and Time", -helplink    => 'sessioninfo',
                   -oneline => $TRUE,     -onetime  => $TRUE,                 -granularity => 15,
                   -default => $SessionDefaultDateTime, -required => $RequiredEntries{StartDate} );
  print "</div><div>\n";
  LocationBox(-default  => $DefaultEventLocation);
  print "</div><div>\n";
  TextField(-name      => 'altlocation', -size     => 40,
            -maxlength => 128,           -default  => $DefaultEventAltLocation,
            -helplink  => 'sessioninfo', -helptext => 'Alternate Location');
  print "</div><div>\n";
  EventURLBox(-default  => $DefaultEventURL     );
  print "</div><div>\n";
  TextArea(-name     => 'sessiondescription', -columns => 40, -rows => 4,
           -default  => $SessionDefaultDescription,
           -helplink => 'confpreamble', -helptext => 'Preamble');

  print "</div>\n";
  print "</td>\n";
  print "<td>\n";
  SecurityScroll(-addpublic => 'true',
                 -name      => 'meetingviewgroups',
                 -helplink  => 'meetingviewgroups',
                 -helptext  => 'Viewable by',
                 -multiple  => true,
                 -permission=> 'CanView',
                 -default   => \@MeetingViewDefaults,
                 -size      => 8);
  print "</td>\n";
  print "<td>\n";
  SecurityScroll(-name      => 'meetingmodifygroups',
                 -helplink  => 'meetingmodifygroups',
                 -helptext  => 'Modifiable by',
                 -multiple  => true,
                 -permission=> 'CanCreate',
                 -default   => \@MeetingModifyDefaults,
                 -size      => 8);
  print "</td>\n";
  print "</tr>\n";
  print "<tr>\n";

  print "<td>\n";
  AuthorScroll(-multiple => $TRUE,        -default  => \@DefaultModeratorIDs,
               -name     => "moderators", -helptext => "Moderators",
               -helplink => "moderators",);
  print "</td>\n";

  print "<td colspan=\"2\">\n";
  TopicScroll({ -multiple => $TRUE,         -default => \@DefaultTopicIDs,
                -helplink => "topics", -itemformat => "short"});
  print "</td>\n";
  print "</tr>\n";
} else {
  print "<tr>\n";
  print "<td>\n";
  TextField(-name      => 'sessiontitle', -size     => 40,
            -maxlength => 128,            -default  => $SessionDefaultTitle,
            -helplink  => 'sessioninfo',  -helptext => 'Session Title');
  print "</td>\n";
  print "<td>\n";
  DateTimePulldown(-name    => "session", -helptext => "Start Date and Time", -helplink    => 'sessioninfo',
                   -oneline => $TRUE,     -onetime  => $TRUE,                 -granularity => 15,
                   -default => $SessionDefaultDateTime, -required => $RequiredEntries{StartDate} );
  print "</td>\n";

  print '<td rowspan="2">';
  AuthorScroll(-multiple => $TRUE,        -default  => \@DefaultModeratorIDs,
               -name     => "moderators", -helptext => "Moderators",
               -helplink => "moderators",);
  print "</td>\n";

  print '<td rowspan="2">';
  TopicScroll({ -multiple => $TRUE,         -default => \@DefaultTopicIDs,
                -helplink => "topics", -itemformat => "short"});
  print "</td>\n";

  print "</tr>\n";

  print "<tr>\n";
  print "<td>\n";
  TextArea(-name     => 'sessiondescription', -columns => 35, -rows => 4,
            -default  => $SessionDefaultDescription,
            -helplink => 'sessioninfo', -helptext => 'Session Description');
  print "</td>\n";
  print "<td><div>\n";
  TextField(-name      => 'sessionlocation', -size     => 35,
            -maxlength => 128,               -default  => $SessionDefaultLocation,
            -helplink  => 'sessioninfo',     -helptext => 'Session Location');
  print "</div><div>\n";
  TextField(-name      => 'sessionaltlocation', -size     => 35,
            -maxlength => 128,               -default  => $SessionDefaultAltLocation,
            -helplink  => 'sessioninfo',     -helptext => 'Alternate Location');
  print "</div><div>\n";
  print FormElementTitle(-helplink  => "meetshowall", -helptext  => "Show All Talks?", -nobreak => $TRUE, -nocolon => $TRUE);
  if ($SessionDefaultShowAllTalks) {
    print $query -> checkbox(-name => "meetshowall", -value => 1, -label => '', -checked => 'Yes');
  } else {
    print $query -> checkbox(-name => "meetshowall", -value => 1, -label => '');
  }
  print "</div></td>\n";
  print "</tr>\n";
}
print "</table>\n";

print "<p class=\"SubmitCell\">\n";
print $query -> submit (-value => $ButtonTitle);
print "</p>\n";
&TalkEntryForm(@SessionOrderIDs);
print "<p class=\"SubmitCell\">\n";
print $query -> submit (-value => $ButtonTitle);
print "</p>\n";

print "</div>\n";
print $query -> end_multipart_form;
my $NavBarText = "Display&nbsp;Session";
my $NavBarURL  = "$DisplayMeeting?sessionid=$SessionID";
&DocDBNavBar($NavBarText,$NavBarURL);
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
