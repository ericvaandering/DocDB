#! /usr/bin/env perl

use lib ".";

#
#        Name: AddFiles
# Description: Adds downloaded files to the database and filesystem
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified:

# Copyright 2001-2017 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use Benchmark;
use CGI;
use CGI::Untaint;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "SecuritySQL.pm";
require "RevisionSQL.pm";
require "MiscSQL.pm";

require "FSUtilities.pm";
require "WebUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "FileUtilities.pm";
require "Security.pm";

require "RevisionHTML.pm";

if ($UseSignoffs) {
  require "SignoffUtilities.pm";
  require "SignoffSQL.pm";
}

if ($MailInstalled) {
  require "MailNotification.pm";
}

$query = new CGI;  # Global for subroutines
$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);

&GetSecurityGroups; # FIXME Replace with fetches in right place

### Set up, give user initial information

my $Untaint = CGI::Untaint -> new($query -> Vars);

print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("$Project File Addition Results","File Addition Results");

### Check parameters for errors

@ErrorStack = ();
@WarnStack  = ();

### Get document and revision ID

my $DocumentID = $Untaint -> extract(-as_integer => "docid") || 0;
my $Version = $Untaint -> extract(-as_integer => "version") || 0;
my $Replace = $Untaint -> extract(-as_printable => "replace") || "";
my $MaxFiles = $Untaint -> extract(-as_integer => "maxfiles") || 0;
my $SubmitAgree = $Untaint -> extract(-as_printable => "submitagree") || "";
my $PreserveSigs = $Untaint -> extract(-as_printable => "preservesigs") || "";

my $DocRevID;

### Check for user errors

if ($DocumentID && $Version) {
  $DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
  unless ($DocRevID && CanModify($DocumentID,$Version)) {
    push @ErrorStack,"You are not authorized to modify this document or it does not exist.";
  }
} else {
  push @ErrorStack,"You must supply document and version numbers to add files.";
}

if ($Preferences{Options}{SubmitAgree} && !$SubmitAgree) {
  push @ErrorStack,'You must check the box near with this statement: \n'.
                   $Preferences{Options}{SubmitAgree}.
                   '\nto add files to the document.';
}

if ($PreserveSigs && !CanPreserveSigs("update")) {
  push @ErrorStack,'You are not authorized to preserve signatures when making '.
                   'this change. Members of another group may have this capability. ';
}

my $UpdateLink = $DocumentAddForm."?mode=update&docid=$DocumentID";

# Fill in file hash
my $HttpUser = $Untaint -> extract(-as_printable => "http_user") || "";
my $HttpPass = $Untaint -> extract(-as_printable => "http_pass") || "";

my %Files = ();
my $NeedURLs   = 0;
my $AddNewFile = 0;

for (my $i = 1; $i<= $MaxFiles; ++$i) {
  my $Key = $i; # Probably something better later
  my $UploadI = $query -> param("upload$i");
  my $UrlI = $Untaint -> extract(-as_printable => "url$i") || "";
  my $MainI = $Untaint -> extract(-as_printable => "main$i") || "";
  my $DescriptionI = $Untaint -> extract(-as_safehtml => "filedesc$i") || "";
  if ($UploadI) {
    $AddNewFile = 1;
    $Files{$Key}{File} = $UploadI;
    if (&ExistsUpload($DocRevID,$Files{$Key}{File})) {
      if ($Replace) {
        push @WarnStack,"The file $short_file already existed and has been
                         replaced with a new version.";
      } else {
        push @ErrorStack,"The file $short_file already exists.  You may not add
             files with the same file name. You probably want to update your document,  not add files.";
      }
    }
  } elsif ($UrlI) {
    $NeedURLs = 1;
    $AddNewFile = 1;
    $Files{$Key}{URL}  = $UrlI;
    $Files{$Key}{User} = $HttpUser;
    $Files{$Key}{Pass} = $HttpPass;
    if (&ExistsURL($DocRevID,$Files{$Key}{URL})) {
      if ($Replace) {
        push @WarnStack,"The file $short_file already existed and has been
                          replaced with a new version.";
      } else {
        push @ErrorStack,"The file $short_file already exists.
         You may not add files with the same file name.
         You probably want to update your document, not add files.";
      }
    }
  }

  if ($MainI) {
    $Files{$Key}{Main} = 1;
  } else {
    $Files{$Key}{Main} = 0;
  }

  $Files{$Key}{Description} = $DescriptionI;
}

unless ($AddNewFile) {
  push @ErrorStack,"You must supply a file for this document.";
}

# Download HTTP files (generates it's own warnings)

if ($NeedURLs) {
  my $TmpDir = &MakeTmpSubDir();
  %Files = &DownloadURLs(-tmpdir => $TmpDir, -files => \%Files);
}

### Abort if there were errors

EndPage(@ErrorStack);

### Put files in filesystem

$new_dir = &MakeDirectory($DocumentID,$Version);

my @FileIDs = &AddFiles(-docrevid   => $DocRevID, -files => \%Files,
                        -replaceold => $Replace);
my @GroupIDs = GetRevisionSecurityGroups($DocRevID);
ProtectDirectory($DocumentID, $Version, @GroupIDs); # Redo security again

### Touch document

&UpdateRevision(-docrevid => $DocRevID);

### Remove signatures from document if they existed

if ($UseSignoffs && !$PreserveSigs) {
  $Status = &UnsignRevision($DocRevID);
  if ($Status eq "Unsigned") {
    push @WarnStack,"All signatures from the document have been removed.";
  }
}

### If we had any warnings print them out now

WarnPage(@WarnStack); @WarnStack = ();

%DocFiles = (); @Files    = (); # Files DB not in sync, clear it

### Output feedback to the user

my $full_docid = FullDocumentID($DocumentID);
   $DocRevID   = FetchRevisionByDocumentAndVersion($DocumentID,$Version);

unless ($DocRevID) {
  print "This document does not exist.<p>\n";
  exit;
  print $query->end_html;
}

print "You were successful in adding files. Your entry now contains
       the following information: <p>\n";

if ($UseSignoffs) {
  ClearSignatures();
}
PrintRevisionInfo($DocRevID);

if ($MailInstalled) {
  MailNotices(-docrevid => $DocRevID, -type => "addfiles");
  if ($UseSignoffs && !$PreserveSigs) {
    NotifySignees($DocRevID);
  }
}

$EndTime  = new Benchmark;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
