#! /usr/bin/env perl

use lib ".";

#
# Description: Script to confirm a match between a talk entered in the agenda
#              and a document
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified: Eric Vaandering (ewv@fnal.gov)
#

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "Messages.pm";

require "ResponseElements.pm";
require "SecuritySQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "TalkSQL.pm";
require "MeetingSQL.pm";
require "MeetingSecurityUtilities.pm";

require "FSUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "Security.pm";
require "SQLChecks.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);

my $Untaint = CGI::Untaint -> new($query -> Vars);

@ErrorStack = ();
@WarnStack  = ();

my $DocumentID = $Untaint -> extract(-as_typedint => "documentid") || 0;
my $SessionTalkID = $Untaint -> extract(-as_typedint => "sessiontalkid") || 0;

unless ($DocumentID) {
  push @ErrorStack,"You are must supply a document number!";
}

unless ($SessionTalkID) {
  push @ErrorStack,"You are must supply a Session Number!";
}

print $query -> header( -charset => $HTTP_ENCODING );
&DocDBHeader("Confirming document match","",-nobody => $TRUE);

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rwuser,$db_rwpass);
unless ($dbh) {
  push @ErrorStack,$Msg_NoConnect;
}
&EndPage(@ErrorStack);

&FetchDocument($DocumentID);
$Version  = $Documents{$DocumentID}{NVersions};
$DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
unless (&CanModify($DocumentID,$Version)) {
  push @ErrorStack,$Msg_DocNoAccess;
}

unless ($DocRevID) { # Probably never executed since CanAccess fails.
  push @ErrorStack,"This document does not exist.";
}

&FetchSessionTalkByID($SessionTalkID);
my $SessionID =  $SessionTalks{$SessionTalkID}{SessionID};
&FetchSessionByID($SessionID);
my $ConferenceID = $Sessions{$SessionID}{ConferenceID};
unless (&CanModifyMeeting($ConferenceID)) {
  push @ErrorStack,$Msg_MeetNoModify;
}

&EndPage(@ErrorStack);

my $SessionTalkUpdate = $dbh -> prepare(
 "update SessionTalk set DocumentID=?, Confirmed=1 where SessionTalkID=?");
$SessionTalkUpdate -> execute($DocumentID,$SessionTalkID);

my $RevisionEventCheck = $dbh -> prepare("select RevEventID from RevisionEvent where DocRevID=? and ConferenceID=?");
$RevisionEventCheck -> execute($DocRevID,$ConferenceID);
my ($RevisionEventID) = $RevisionEventCheck -> fetchrow_array;
unless ($RevisionEventID) {
  my $Insert = $dbh -> prepare("insert into RevisionEvent (RevEventID,DocRevID,ConferenceID) values (0,?,?)");
  $Insert -> execute($DocRevID,$ConferenceID);
}
print "<p><b>The match has been confirmed.<br/>
             Press the button below to reload the original page.</b></p>\n";

print "<p class=\"SubmitCell\"><form>\n";
print " <input type=\"button\" value=\"Close Window and Reload\" onclick=\"opener.location.reload(1); window.close()\">\n";
print "</form></p>";

&DocDBFooter($DBWebMasterEmail,$DBWebMasterName,-nobody => $TRUE);
