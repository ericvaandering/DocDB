#! /usr/bin/env perl

use lib ".";

#
#        Name: EmailAdministerForm
# Description: This script provides a form to administer users receiving
#              e-mail notifications and shows the complete list of who is
#              receiving what.
#
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2017 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "Scripts.pm";
require "ResponseElements.pm";
require "Security.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "AdministerElements.pm";
require "EmailUserHTML.pm";
require "SecurityHTML.pm";

require "MailNotification.pm";
require "Sorts.pm";
require "SecuritySQL.pm";
require "NotificationSQL.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
$dbh   = DBI -> connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

my $Untaint = CGI::Untaint -> new($query -> Vars);

my $EmailUserID = $Untaint -> extract(-as_integer => "emailuserid") || 0;

GetSecurityGroups();

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader("User Administration","",-scripts => ["PopUps","PersonalAccountAdminDisable"]);

@ErrorStack = ();
@WarnStack  = ();

unless (CanAdminister()) {
  push @ErrorStack,"You are not allowed to access administrative functions.";
}

EndPage();

my $UsernameHeader = "Username";
my $NewUsernameHeader = "New Username";
if ($UserValidation eq "certificate") {
  $UsernameHeader = "Certificate DN";
  $NewUsernameHeader = "New Certificate DN";
}

if ($EmailUserID) {
  print "<p>This form allows you to delete the user, change which groups the
         user belongs to, ";
  unless ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $UserValidation eq "FNALSSO") {
    print "reset the user's password, copy settings to a new account, ";
  }
  print " and change their permissions. The full information, including
          notifications, for the user is shown below.</p>";
} else {
  print "<p><b>This form allows you to administer personal accounts.</b></p>\n";

  print "<p>Since users can modify their own data and create their own accounts,
         the only functions you can perform here are to delete a user, ";
  unless ($UserValidation eq "certificate" || $UserValidation eq "shibboleth"|| $UserValidation eq "FNALSSO") {
    print "reset the user's password, ";
  }
  print "change the user's permissions, and change which groups the user belongs to. If  \"Clear Groups\" is
         selected, the list of groups the user belongs to will be cleared and set
         to the selected groups (if any). Use this option if any of the groups a user
         currently belongs to are incorrect. The full list of users and their
         groups are shown below for your reference.</p>\n";

  print "<p>Click on a username to get an simpler form to modify just that user.</p>\n";
}

### Gather info for EmailUserID mode

my @DefaultUsersGroups = ();
my ($DefaultCanSign,$DefaultVerified);
if ($EmailUserID) {
  FetchEmailUser($EmailUserID);
  @DefaultUsersGroups = FetchUserGroupIDs($EmailUserID);
  if ($EmailUser{$EmailUserID}{Verified}) {
    $DefaultVerified = $TRUE;
  }
  if ($EmailUser{$EmailUserID}{CanSign}) {
    $DefaultCanSign = $TRUE;
  }
}

### Email User Modification

print $query -> start_multipart_form('POST',"$EmailAdminister",
                                     "id=\"peraccount\" name=\"peraccount\" onsubmit=\"return confirmxfer()\"");
print "<table class=\"MedPaddedTable\">\n";
print "<tr>\n";

print "<td colspan=\"3\">\n";
 AdministerActions(-form => "peraccount", -addTransfer => $TRUE);
print "</td>\n";

print "</tr>\n";

print "<tr>\n";

print "<td>\n";
 EmailUserSelect(-disabled => $TRUE, -default => [$EmailUserID], -helptext => $UsernameHeader);
print "</td>\n";

print "<td>\n";
if ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $UserValidation eq "FNALSSO") {
  print "&nbsp;\n";
} else {
  print FormElementTitle(-helplink => "resetpassword", -helptext => "New Password");
  print $query -> textfield (-name => 'resetpw', -size => 20, -maxlength => 20, -disabled => "disabled");
}
print "</td>\n";
print "<td>\n";
SecurityScroll(-helplink => 'usergroups', -helptext => 'User\'s Groups',
               -name     => 'usergroups', -disabled => $TRUE,
               -multiple => $TRUE,        -default  => \@DefaultUsersGroups);
print "</td>\n";
print "</tr>\n";

# The select box for consolidating certificates

print "<tr><td>\n";
EmailUserSelect(-disabled => $TRUE, -helptext => $NewUsernameHeader, -helplink => 'newcert', -name => 'newcertid');
print "</td></tr>\n";

if ($EmailUserID) {
  print "<tr><td colspan=\"3\">\n";
  print $query -> hidden(-name => "singleuser", -default => '1');
  if ($DefaultVerified) {
    print $query -> checkbox(-name => "verifyuser", -label => 'User is Verified', -checked => 'Yes');
  } else {
    print $query -> checkbox(-name => "verifyuser", -label => 'User is Verified');
  }
  print "</td></tr>\n";
} else {
  print "<tr><td colspan=\"3\">\n";
  print $query -> checkbox(-name  => "verifyuser", -label => 'Verify User');
  print "</td></tr>\n";
}
print "<tr><td colspan=\"3\">\n";
if ($DefaultCanSign) {
  print $query -> checkbox(-name => "usersign", -label => 'User Can Sign Docs', -checked => 'Yes');
} else {
  print $query -> checkbox(-name => "usersign", -label => 'User Can Sign Docs');
}
print "</td></tr>\n";
unless ($EmailUserID) {
  print "<tr><td colspan=\"3\">\n";
  print $query -> checkbox(-name  => "clearuser", -label => 'Clear Verify and Sign');
  print "</td></tr>\n";
  print "<tr><td colspan=\"3\">\n";
  print $query -> checkbox(-name  => "cleargroups", -label => 'Clear User\'s Groups');
  print "</td></tr>\n";
}

print "<tr>\n";
print "<td colspan=\"3\">\n";
AdministratorPassword();
print "&nbsp;";
print $query -> submit(-name => "somename", -class => "Action", -value => "Modify Personal Account");
print "</td>\n";
print "</tr>\n";

print "</table>\n";
print $query -> end_multipart_form;

if ($EmailUserID) {
  my $Count = FetchNotifications( {-emailuserid => $EmailUserID} );
  print "<h4>Full User Information</h4>";
  print '<table class="MedPaddedTable">';
  PrintEmailUserInfo($EmailUserID, $TRUE);
  print '</table>';
} else {
  print "<p>\n";
  print "<b>The personal accounts and when they receive e-mail are shown below:</b></p>\n";
  print "<hr/>\n";

### Display of existing groups

  my @EmailUserIDs = sort EmailUserIDsByName GetEmailUserIDs();

  print "<table class=\"DocumentList Alternating\">\n";
  print "<tr><th>Name</th><th>$UsernameHeader</th><th>Verified?</th><th>Can Sign?</th><th>Groups</th></tr>\n";
  #print "<th>Notifications</th>\n";

  my $Row = 0;
  foreach my $EmailUserID (@EmailUserIDs) {

  # Get the list of groups
    my @Groups = ();
    my @UserGroupIDs = FetchUserGroupIDs($EmailUserID);
    foreach my $UserGroupID (@UserGroupIDs) {
      FetchSecurityGroup($UserGroupID);
      push @Groups,"<a href=\"#$SecurityGroups{$UserGroupID}{NAME}\">$SecurityGroups{$UserGroupID}{NAME}</a>";
    }
    my $Groups = join "<br/>",sort @Groups;
    unless ($Groups) {
      $Groups = "None";
    }

  # Figure out if there are notifications
  # FIXME: Can't actually use this until everything is unified. Just too much work right now.
  # FIXME: Also add option to delete all notifications when this is unified
    my $Count = FetchNotifications( {-emailuserid => $EmailUserID} );
    my $Notifications = "No";
    if ($Count) {
      $Notifications = "Yes";
    }

    my $Verified = ("No","Yes")[$EmailUser{$EmailUserID}{Verified}];
    my $CanSignText  = ("No","Yes")[$EmailUser{$EmailUserID}{CanSign}];
    my $CanSign = '<a href="'.$SignatureReport."?emailuserid=$EmailUserID\">".SmartHTML({-text => $CanSignText}).'</a>';

    ++$Row;
    my $RowClass = ("Even","Odd")[$Row % 2];

    my $Link = $EmailAdministerForm."?emailuserid=$EmailUserID";

    print "<tr class=\"$RowClass\">\n";
    print "<td><a href=\"$Link\">".SmartHTML({-text => $EmailUser{$EmailUserID}{Name}})."</a></td>\n";
    print "<td><a href=\"$Link\">".SmartHTML({-text => $EmailUser{$EmailUserID}{Username}})."</a></td>\n";
    print "<td>$Verified</td>\n";
    print "<td>$CanSign</td>\n";
    print "<td>$Groups</td>\n";
  #  print "<td>$Notifications</td>\n";
    print "</tr>\n";
  }
  print "</table>\n";

  ### List of groups with associated names

  my @SecurityGroups = sort keys %SecurityIDs;

  foreach my $SecurityGroup (@SecurityGroups) {
    my @EmailUserIDs = sort EmailUserIDsByName FetchEmailUserIDsBySecurityGroup($SecurityIDs{$SecurityGroup});
    if (@EmailUserIDs) {
      print "<p><a name=\"$SecurityGroup\" /><strong>$SecurityGroup has these members:</strong></p>\n<ul>\n";
      foreach my $EmailUserID (@EmailUserIDs) {
        if ($EmailUser{$EmailUserID}{Name}) {
          print "<li>".SmartHTML({-text => "$EmailUser{$EmailUserID}{Name} ($EmailUser{$EmailUserID}{Username}, $EmailUser{$EmailUserID}{EmailAddress})"})."</li>\n";
        } else {
          print "<li>Unknown (ID: $EmailUserID)</li>\n";
        }
      }
      print "</ul>\n";
    }
  }
}

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
