#! /usr/bin/env perl

use lib ".";

#
# Description: This script is called by AdministerForm and does administration
#              on Topics in the DB. TopicAdd is simpler and can only add
#              topics. TopicAdd is most useful in setting up a new DB, while
#              TopicAdminister will be more useful in maintaining an existing DB.
#
#      Author: Eric Vaandering (ewv@fnal.gov)
#    Modified:

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "AdministerElements.pm";
require "ResponseElements.pm";
require "Scripts.pm";
require "Security.pm";
require "Messages.pm";
require "Sorts.pm";

require "DBUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";

require "TopicHTML.pm";
require "TopicSQL.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);

# Parameters to script

my $Untaint = CGI::Untaint -> new($query -> Vars);

my $Password      = $Untaint -> extract (-as_printable => "password")    || "";
my $Username      = $Untaint -> extract (-as_printable => "admuser")     || "";
my $Action        = $Untaint -> extract (-as_printable => "admaction")   || "";
my $Force         = $Untaint -> extract (-as_printable => "admforce")    || "";

my $TopicID       = $Untaint -> extract (-as_integer   => "topics")      || 0;
my $ParentTopicID = $Untaint -> extract (-as_integer   => "parenttopic") || 0;
my $LongName      = $Untaint -> extract (-as_safehtml => "longdesc")    || "";
my $ShortName     = $Untaint -> extract (-as_safehtml => "shortdesc")   || "";


$query -> delete_all();

# Open connection and die if we can't

if ($Action && (!$Password || !$Username)) {
  push @ErrorStack,$Msg_AdminNoPass;
}
EndPage(-startpage => $TRUE);

if ($Action || $Password || $Username) {
  CreateConnection(-user => $Username, -password => $Password);
} else {
  CreateConnection(-type => "ro");
}
EndPage(-startpage => $TRUE);

print $query -> header( -charset => $HTTP_ENCODING );
DocDBHeader("Topic Administration","",-scripts => ["PopUps","TopicAdminDisable"]);

unless (CanAdminister()) {
  push @ErrorStack,$Msg_AdminNoLogin;
}
EndPage();
GetTopics();

if ($Action eq "Delete") {
  # FIXME?: Force option is not going to be compatible with children with
  # multiple parents In that case we would need to determine if any topics
  # would be orphaned and  then delete those, but not ones with another
  # parent

  DeleteTopic({ -topicid => $TopicID, -force => $Force });
} elsif ($Action eq "Modify") {
  unless ($TopicID) {
    push @WarnStack,$Msg_ModTopicEmpty;
  }

# Deal with name changes

  if ($TopicID && $ShortName) {
    push @ActionStack,"Updated short description of topic.";
    my $Update = $dbh -> prepare("update Topic set ShortDescription=? where TopicID=?");
    $Update -> execute($ShortName,$TopicID);
  }
  if ($TopicID && $LongName) {
    push @ActionStack,"Updated long description of topic.";
    my $Update = $dbh -> prepare("update Topic set LongDescription=? where TopicID=?");
    $Update -> execute($LongName,$TopicID);
  }

# Deal with parent changes

  if ($TopicID && $ParentTopicID && $ParentTopicID == $TopicID) {
    push @WarnStack,"You cannot set a topic to be its own parent. No action taken.";
  }

  if (grep {$_ eq $ParentTopicID} @{$TopicDescendants{$TopicID}}) {
    push @ErrorStack,"The topic you tried to modify has the proposed parent as one of its descendants. No action taken.";
  }

  EndPage();

  if ($TopicID && $ParentTopicID && $ParentTopicID != $TopicID) {
    push @ActionStack,"Updated parent topic of (sub)topic.";

    my $Delete = $dbh -> prepare("delete from TopicHierarchy where TopicID=?");
    my $Insert = $dbh -> prepare("insert into TopicHierarchy (TopicHierarchyID,TopicID,ParentTopicID) values (0,?,?)");

    $Delete -> execute($TopicID);
    $Insert -> execute($TopicID,$ParentTopicID);
  }
} elsif ($Action eq "New") {

  if ($ShortName || $LongName) {
    if (!$LongName) {
      $LongName = $ShortName;
      push @WarnStack,"No long description supplied. Short description substituted.";
    } elsif (!$ShortName) {
      $ShortName = $LongName;
      push @WarnStack,"No short description supplied. Long description substituted.";
    }
    my $TopicInsert = $dbh -> prepare("insert into Topic ".
                      "(TopicID, ShortDescription, LongDescription) values (0,?,?)");

    $TopicInsert -> execute($ShortName,$LongName);
    my $TopicID = $TopicInsert -> {mysql_insertid};
    if ($ParentTopicID && $TopicID && $ParentTopicID != $TopicID) {
      my $Insert = $dbh -> prepare("insert into TopicHierarchy (TopicHierarchyID,TopicID,ParentTopicID) values (0,?,?)");
      $Insert -> execute($TopicID,$ParentTopicID);
      push @ActionStack,"New sub-topic created with descriptions $ShortName and $LongName.";
    } else {
      push @ActionStack,"New root-level topic created with descriptions $ShortName and $LongName.";
    }
  } else {
    push @WarnStack,"No short or long description supplied. No topic created.";
  }
} elsif ($TopicID || $ParentTopicID || $LongName || $ShortName) {
  push @WarnStack,"No valid action was specified.";
}

if (@ActionStack) {
  ClearTopics();
  GetTopics();
  ActionReport();
}

EndPage();

print $query -> start_multipart_form('POST',"$TopicAdminister",'id="topic" name="topic"');

print "<table class=\"MedPaddedTable\">\n";
print "<tr>\n";
print "<td colspan=\"2\">\n";
 AdministerActions(-form => "topic");
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td rowspan=\"3\">\n";
 TopicScroll({ -helptext   => "Topic", -helplink => "topics",
               -itemformat => "full",  -disabled => $TRUE,
               -extratext  => "[Long description]",
            });
print "</td>\n";
print "<td>\n"; ShortDescriptionBox(-name => "shortdesc", -disabled => $TRUE);
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td>\n"; LongDescriptionBox(-name => "longdesc", -disabled => $TRUE);
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td>\n";
 AdminRegardless();
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print "<td>\n";
 TopicScroll({ -helptext   => "Parent Topic", -helplink => "parenttopic",
               -itemformat => "full",         -disabled => $TRUE,
               -name       => "parenttopic",
               -extratext  => "[Long description]",
            });
print "</td>\n";
print "</tr>\n";

print "<tr>\n";
print '<td colspan="2">';
AdministratorPassword();
print "&nbsp;";
print $query -> submit (-class => "Action", -value => "Change Topic Info");
print "</td>\n";
print "</tr>\n";

print "</table>\n";
print $query -> end_multipart_form;

DocDBNavBar();
DocDBFooter($DBWebMasterEmail,$DBWebMasterName);

exit;
