#! /usr/bin/env perl

use lib ".";

#
# Author Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2017 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use Benchmark;
use CGI;
use DBI;

$StartTime = new Benchmark;

require "DocDBGlobals.pm";
require "Messages.pm";
require "HTMLUtilities.pm";
require "ResponseElements.pm";
require "FormElements.pm";
require "Scripts.pm";
require "Security.pm";
require "SecurityHTML.pm";
require "FormElements.pm";

require "CertificateUtilities.pm";

$query = new CGI;  # Global for subroutines

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

### Start HTML

print $query -> header( -charset => $HTTP_ENCODING );
if ($UserValidation eq "FNALSSO") {
  DocDBHeader("SSO Status and Application","",-scripts => ["PopUps"]);
} else {
 DocDBHeader("Certificate Status and Application","",-scripts => ["PopUps"]);
}

&EndPage(@ErrorStack);

### Output Information
my $CertificateStatus = &CertificateStatus();
my $CertEmail = $ENV{SSL_CLIENT_S_DN_Email};
my $CertCN    = $ENV{SSL_CLIENT_S_DN_CN};
my $CertDN    = $ENV{SSL_CLIENT_S_DN};

push @DebugStack, "DN is $CertDN, CN is $CertCN";

if ($CertificateStatus eq "verified") {
  print "<b>Your certificate has been verified and you have access to documents from these groups:</b>";
  my @GroupIDs = &FindUsersGroups();
  print "<ul>\n";
  if (@GroupIDs) {
    foreach my $GroupID (@GroupIDs) {
      &FetchSecurityGroup($GroupID);
      print "<li>",$SecurityGroups{$GroupID}{NAME},"</li>\n";
    }
  } else {
    print "<li><b>None.</b> Contact an administrator if this is incorrect</li>\n";
  }
  print "</ul>\n";
} elsif ($CertificateStatus eq "unverified") {
  print "<b>Your certificate is valid and you have applied for access to documents.
         If you believe your request has been misplaced or neglected, contact an administator.</b><p/>";
  print "The following information may be helpful:<br>\n";
  print "<b>Certificate Distinguished Name (DN):</b> $CertDN<br/>\n";
  print "<b>Certificate Common Name (CN):</b> $CertCN<br/>\n";
  print "<b>Certificate E-mail Address:</b> $CertEmail<br/>\n";
} elsif ($CertificateStatus eq "noapp" || $UserValidation eq "FNALSSO") {
  if ($UserValidation eq "FNALSSO") {
    print "<p><b>Your SSO is valid and your current groups are listed.
           Fill out the form below to apply for access to additional groups.<br/>
           Select the groups which you think you belong to from the list.
           Your selection(s) will be verified by an administrator.</b></p>";
  } else {
    print "<p><b>Your certificate is valid but you have never applied for access to
           documents.<br/>Fill out the form below to apply for access.
           Select the groups which you think you belong to from the list.
           Your selection(s) will be verified by an administrator.</b></p>";
  }         
  print "<center>\n";
  if ($UserValidation eq "FNALSSO") {
      print $query -> start_multipart_form('POST',$SSOAccessApply);
  } else {
    print $query -> start_multipart_form('POST',$UserAccessApply);
  }  
  print "<table class=\"MedPaddedTable CenteredTable\">\n";
  print "<tr>\n";

  if ($UserValidation eq "FNALSSO") {
    require "FNALSSOUtilities.pm";
    my ($FQUN, $Username, $EmailAddress, $Name) = GetUserInfoFSSO();
    my $EmailUserID = FetchEmailUserID();
    print "<td><b>Username:</b> $FQUN</p>\n";
    print "<b>Name:</b> $Name</p>\n";
    print "<b>Email:</b> $EmailAddress<p/>\n";
    print "<b>Current groups:</b>\n";
    print "<ul>\n";
    my @UserGroupIDs = FetchSecurityGroupsForFSSO();
    foreach my $UserGroupID (@UserGroupIDs) {
      FetchSecurityGroup($UserGroupID);
      print "<li>".SmartHTML({-text => $SecurityGroups{$UserGroupID}{NAME}})."</li>\n";
    }
    print "</ul>\n";
  } else {
    print "<td colspan=\"2\"><b>Your certificate DN:</b><br/>&nbsp;&nbsp;$CertDN<p/></td>\n";
    print "</tr><tr>\n";
    print "<td><b>Your name (certificate CN):</b><br/>&nbsp;&nbsp;$CertCN<p/>\n";
    TextField(-name => "email", -helplink  => "email", -helptext => "Your E-mail",
              -size => 20,      -maxlength => 64,      -default  => $CertEmail);
    print "</td>\n";
  }  
  print "<td>\n";
  SecurityScroll(-helplink => "reqgroups", -helptext => "Requested Groups",
                 -name     => "reqgroups", -multiple => $TRUE, -format => "full");
  print "</td></tr>\n";
  print "<tr>\n";
  print "</td></tr>\n";
  print "<tr><td colspan=\"2\">\n";
  TextArea(-helplink  => "certnote", -helptext => "Notes",
           -extratext => "(Identify yourself or other notes if needed.)",
           -name      => "certnote");
  print "</td></tr>";
  print "<tr><td colspan=2 align=center>\n";
  print $query -> submit (-value => "Apply for access");
  print "</td></tr>";
  print "</table>\n";
  print "</center>\n";
} elsif ($CertificateStatus eq "nocert") {
  print "<b>You didn't present a certificate. Make sure your browser is supplying one and contact an administrator if are supplying one.</b><p/>";
}

&DocDBNavBar();
&DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
