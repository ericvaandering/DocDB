#! /usr/bin/env perl

use lib ".";

#
#        Name: ListEventsBy
# Description: This script lists events and sessions based on the topic(s) or
#              moderator(s) of the events and sessions
#
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI qw(-nosticky);
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "MeetingSQL.pm";

require "DBUtilities.pm";
require "EventUtilities.pm";
require "HTMLUtilities.pm";
require "SQLUtilities.pm";
require "ResponseElements.pm";
require "MeetingHTML.pm";
require "MeetingSQL.pm";
require "TopicHTML.pm";
require "CalendarHTML.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);

# Parameters to script

my $Untaint = CGI::Untaint -> new($query -> Vars);

my $TopicID      = $Untaint -> extract (-as_integer   => "topicid")      || 0;
my $AuthorID     = $Untaint -> extract (-as_integer   => "authorid")     || 0;
my $EventID      = $Untaint -> extract (-as_integer   => "eventid")      || 0;
my $EventGroupID = $Untaint -> extract (-as_integer   => "eventgroupid") || 0;
my $AllEvents    = $Untaint -> extract (-as_integer   => "allevents")    || 0;
my $Format       = $Untaint -> extract (-as_printable => "format")       || "html";

$query -> delete_all();

# Open connection and die if we can't

CreateConnection(-type => "ro");
EndPage(-startpage => $TRUE);

my ($HTML,$iCal);

if ($Format eq "html") {
  print $query -> header;
  DocDBHeader("Event Listing","",-scripts => []);
  EndPage();
  my $HTML = "<div>";
} elsif ($Format eq "ical") {
  require "VEntryOutput.pm" ;
  #print $query -> header( -charset => $HTTP_ENCODING );
  print ICalHeader();
  $iCal = NewICal();
}

my %EventHash = ();

if ($TopicID) {
  require "TopicUtilities.pm";
  require "TopicSQL.pm";

  FetchTopic($TopicID);
  my @ChildIDs = TopicAndSubTopics({-topicid => $TopicID});
  foreach my $ChildID (@ChildIDs) {
    my %Hash = GetEventHashByTopic($ChildID);
    foreach my $ID (keys %Hash) {
      $EventHash{$ID} = $Hash{$ID};
    }
  }
  $HTML .= "<h4>Events for <span class=\"Highlight\">";
  $HTML .= SmartHTML({-text=>$Topics{$TopicID}{Long}});
  $HTML .= " </span>";
  if (scalar(@ChildTopicIDs) > 1) {
    $HTML .= " and its sub-topics";
  }
  if ($Preferences{Components}{iCal}) {
    $HTML .= ' '.ICalLink({ -topicid => $TopicID });
  }
  $HTML .= '<br/>(Documents on '.TopicLink({ -topicid => $TopicID }).')';
  $HTML .= "</h4>";
} elsif ($AuthorID) {
  %EventHash = GetEventHashByModerator($AuthorID);

  my $Link = AuthorLink($AuthorID);

  $HTML .= "<h4>Events moderated by <span class=\"Highlight\">$Link of ";
  $HTML .= SmartHTML({-text=>$Institutions{$Authors{$AuthorID}{InstitutionID}}{LONG}});
  $HTML .= "</span>";
  if ($Preferences{Components}{iCal}) {
    $HTML .= ' '.ICalLink({ -authorid => $AuthorID });
  }
  $HTML .= "</h4>";
} elsif ($EventID) {
  %EventHash = GetEventHashByEvent($EventID);
  # No HTML component, iCal only
} elsif ($EventGroupID) {
  %EventHash = GetEventHashByEventGroup($EventGroupID);
  # No HTML component, iCal only
} elsif ($AllEvents) {
  %EventHash = GetEventHashAllEvents();
  # No HTML component, iCal only
}

# Find events with one session/break, remove from list if session is in list

foreach my $Key1 (keys %EventHash) {
  my $EventID = $EventHash{$Key1}{EventID};
  if ($EventID) {
    my @SessionIDs = FetchSessionsByConferenceID($EventID);
    my @BreakIDs   = FetchSessionSeparatorsByConferenceID($EventID);
    if (scalar(@SessionIDs) == 1 && scalar(@BreakIDs) == 0) {
      my ($SessionID) = @SessionIDs;
      foreach my $Key2 (keys %EventHash) {
        if ($SessionID == $EventHash{$Key2}{SessionID}) {
          $EventHash{$Key1}{EventID} = 0;
        }
      }
    }
  }
}

%TmpEventHash = %EventHash;
my @HashIDs = keys %EventHash;
@HashIDs = sort EventHashByTime @HashIDs;
%TmpEventHash = ();

# Could make this a subroutine and re-use in calendar stuff
if (@HashIDs) {
  $HTML .= '<table class="CenteredTable MultidayEventList Alternating">';
  $HTML .= '<thead><tr>
             <th>Date</th><th>Time</th><th>Title</th>
             <th>Location</th><th>Topic(s)</th>
            </tr></thead>';

  my $LastDate = "";
  my $Row = 0;
  my %DidSession = ();
  my %DidEvent   = ();
  foreach my $HashID (@HashIDs) {
    my ($Location,$Topics,$Title,$Time);
    my ($Date) = split /\s+/,$EventHash{$HashID}{Time};
    my $DateLink = '&nbsp;';
    if ($EventHash{$HashID}{SessionID}) {
      my $SessionID = $EventHash{$HashID}{SessionID};
      if ($DidSession{$SessionID}) { next; }
      $DidSession{$SessionID} = $TRUE;
      if ($Format eq "ical") {
        $iCal->add_entry(ICalSessionEntry({-sessionid => $SessionID,}));
      }

      $Title    = SessionLink(-sessionid => $SessionID, -format => "full");
      $Location = join '<br/>',SmartHTML({-text=>$Sessions{$SessionID}{Location}}),
                               SmartHTML({-text=>$Sessions{$SessionID}{AltLocation}});
      $Topics   = TopicListByID({ -linktype => "event", -listformat => "br", -sortby => "name",
                                  -topicids => $Sessions{$SessionID}{Topics}, });

      my $StartTime = EuroTimeHM($Sessions{$SessionID}{StartTime});
      my $EndTime   = TruncateSeconds(SessionEndTime($SessionID));
      if ($EndTime eq $StartTime) {
        $EndTime = "";
      }
      $Time = "$StartTime &ndash; $EndTime";
    } elsif ($EventHash{$HashID}{EventID}) {
      my $EventID = $EventHash{$HashID}{EventID};

      # Only show event once, even if multi-day
      if ($DidEvent{$EventID}) { next; }
      $DidEvent{$EventID} = $TRUE;
      if ($Format eq "ical") {
        $iCal->add_entry(ICalEventEntry({-eventid => $EventID,}));
      }

      $Title    = EventLink(-eventid => $EventID,);
      $Location = join '<br/>',SmartHTML({-text=>$Conferences{$EventID}{Location}}),
                               SmartHTML({-text=>$Conferences{$EventID}{AltLocation}});
      $Topics   = TopicListByID({ -linktype => "event", -listformat => "br", -sortby => "name",
                                  -topicids => $Conferences{$EventID}{Topics}, });
      $Time = 'All day/no time';
    # Enhance: SessionSeparator meta-data
    } else {
      next; # Skipped events because single session was shown
    }

    if ($LastDate ne $Date) { # Start a new tbody group
     ++$Row;
     if ($LastDate) {        # Close old tbody
        $HTML .= '</tbody>';
      }
      my $RowClass = ("Even","Odd")[$Row % 2];
      $HTML .= "<tbody class=\"$RowClass\">";
      my $DateString = EuroDate($Date);
      $DateLink   = CalendarLink(-text => $DateString, -SQL => $Date);
      $LastDate   = $Date;
    }
    $HTML .= '<tr><td>'.$DateLink.'</td>'.
                 '<td>'.$Time.      '</td>'.
                 '<td>'.$Title.     '</td>'.
                 '<td>'.$Location.  '</td>'.
                 '<td>'.$Topics.    '</td></tr>';
  }
  $HTML .= '</tbody></table>';
} else {
  $HTML .= 'No events found.';
}

$HTML .= '</div>';

if ($Format eq "html") {
  print PrettyHTML($HTML);

  DocDBNavBar();
  DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
} elsif ($Format eq "ical") {
  #print "<body><pre>\n";
  print $iCal->as_string;
  #print "</pre></body>\n";
}

exit;
