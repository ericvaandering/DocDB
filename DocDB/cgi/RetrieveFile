#! /usr/bin/env perl

use lib ".";

#
#        Name: $RCSfile$
# Description: Get a file from a document. Automatically or by extension if possible.
#
#    Revision: $Revision$
#    Modified: $Author$ on $Date$
#
#      Author: Eric Vaandering (ewv@fnal.gov)

# Copyright 2001-2013 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use CGI;
use CGI::Untaint;
use DBI;

require "DocDBGlobals.pm";
require "ResponseElements.pm";
require "SecuritySQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "MiscSQL.pm";
require "FSUtilities.pm";
require "HTMLUtilities.pm";
require "UntaintInput.pm";
require "Security.pm";
require "SQLChecks.pm";

require "RevisionHTML.pm";

$query = new CGI;  # Global for subroutines
$query -> autoEscape(0);
my $Untaint = CGI::Untaint -> new($query -> Vars);

my $DocumentID = $Untaint -> extract(-as_integer => "docid") || 0;
my $Version = $Untaint -> extract(-as_integer => "version") || undef;
my $AsOf = $Untaint -> extract(-as_safehtml => "asof") || undef;
my $FileName = $Untaint -> extract(-as_printable => "filename") || "";
my $Extension = $Untaint -> extract(-as_safehtml => "extension") || "";

unless ($DocumentID) {
  push @ErrorStack,"You are must supply a document number!";
}

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

GetSecurityGroups();

FetchDocument($DocumentID);

if ($Version && $AsOf) {
  push @ErrorStack,"You may not specify both a version and date.";
}
if (grep /\//,$FileName) {
  push @ErrorStack,"File names with / are not allowed for security reasons.";
}
if (grep /htaccess/,$FileName) {
  push @ErrorStack,"You may not access this file for security reasons.";
}

if (@ErrorStack) {  # The user made one or more mistakes, warn and exit
  print $query -> header( -charset => $HTTP_ENCODING );
  DocDBHeader("File Retrieve Results");
  EndPage();
}

my $DocRevID;
if (defined $Version) {
  if ($Version eq "") { # Prob can't happen now, but may in future
    $Version = $Documents{$DocumentID}{NVersions};
  }
  $DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
} elsif (defined $AsOf) {
  if (&CheckSQLDate($AsOf)) {
    $DocRevID = &FetchRevisionByDocumentAndDate($DocumentID,$AsOf);
    $Version  = $DocRevisions{$DocRevID}{VERSION};
  } else {
    push @ErrorStack,"The as-of date must be specifed in the form YYYY-MM-DD.";
  }
} else {
  $Version = $Documents{$DocumentID}{NVersions};
  $DocRevID = &FetchRevisionByDocumentAndVersion($DocumentID,$Version);
}

unless (&CanAccess($DocumentID,$Version)) {
  push @ErrorStack,"You are not authorized to view this document (or it does not exist).";
}

unless ($DocRevID) {
  push @ErrorStack,"This document does not exist.";
}

if (@ErrorStack) {  # The user made one or more mistakes, warn and exit
  print $query -> header( -charset => $HTTP_ENCODING );
  &DocDBHeader("File Retrieve Results");
  EndPage();
}

if ($FileName) {
  $FullFile = &FullFile($DocumentID,$Version,$FileName);
  $FullURL = &GetURLDir($DocumentID,$Version).CGI::escape($FileName);
} elsif ($Extension) {
  &FetchDocFiles($DocRevID);
  my $NFiles = 0;
  my $LastFile = "";
  foreach my $DocFileID (keys %DocFiles) {
    if ($DocFiles{$DocFileID}{DOCREVID} == $DocRevID &&
        grep /$Extension$/i,$DocFiles{$DocFileID}{NAME}) {
      ++$NFiles;
      $LastFile = $DocFiles{$DocFileID}{NAME};
    }
  }
  if ($NFiles == 1) {
    $FullFile = &FullFile($DocumentID,$Version,$LastFile);
    $FullURL  = &GetURLDir($DocumentID,$Version).CGI::escape($LastFile);
  } elsif ($NFiles > 1) {
    push @WarnStack,"More than one file was found. Please select one below.";
  }
} else {
  &FetchDocFiles($DocRevID);
  my $NFiles = 0;
  my $LastFile = "";
  foreach my $DocFileID (keys %DocFiles) {
    if ($DocFiles{$DocFileID}{DOCREVID} == $DocRevID &&
        $DocFiles{$DocFileID}{ROOT}) {
      ++$NFiles;
      $LastFile = $DocFiles{$DocFileID}{NAME};
    }
  }
  if ($NFiles == 1) {
    $FullFile = &FullFile($DocumentID,$Version,$LastFile);
    $FullURL = &GetURLDir($DocumentID,$Version).CGI::escape($LastFile);
  } elsif ($NFiles > 1) {
    push @WarnStack,"More than one file was found. Please select one below.";
  } else {
    push @WarnStack,"No files were found. Document info is below.";
  }
}

unless (-e $FullFile) {
  push @WarnStack,"No appropriate file was found.";
}

if ($FullFile && ($UserValidation eq "certificate" || $UserValidation eq "shibboleth" || $Preferences{Options}{AlwaysRetrieveFile})) {
  require "FileUtilities.pm";
  StreamFile(-file => $FullFile);
} elsif ($FullURL) {
  print $query -> redirect(-location => $FullURL, -method => 'GET');
} else {
  print $query -> header( -charset => $HTTP_ENCODING );
  DocDBHeader("File Retrieve Results");
  EndPage(@ErrorStack);

  PrintRevisionInfo($DocRevID);

  DocDBNavBar();
  DocDBFooter($DBWebMasterEmail,$DBWebMasterName);
}
