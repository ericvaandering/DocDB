#! /usr/bin/env perl

use lib ".";

#
# Author Eric Vaandering (ewv@fnal.gov)
#

# Usage: NotifyDigest -t Weekly|Daily

# Copyright 2001-2009 Eric Vaandering, Lynn Garren, Adam Bryant

#    This file is part of DocDB.

#    DocDB is free software; you can redistribute it and/or modify
#    it under the terms of version 2 of the GNU General Public License 
#    as published by the Free Software Foundation.

#    DocDB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with DocDB; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

use DBI;
use Getopt::Long;

require "CGIInclude.pm";

require Mail::Mailer;
require Mail::Send;

require "DocDBGlobals.pm";
require "TopicSQL.pm";
require "DocumentSQL.pm";
require "RevisionSQL.pm";
require "NotificationSQL.pm";
require "MailNotification.pm";
require "Sorts.pm";
require "Utilities.pm";

GetOptions("t=s" => \$Period);

unless ($Period eq "Weekly" or $Period eq "Daily") {
  print "Usage: NotifyDigest -t Weekly|Daily\n";
  exit;
}  

my $Days;
if ($Period eq "Weekly") {
  $Days = 7;
} elsif ($Period eq "Daily") {
  $Days = 1;
}

$dbh   = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host,$db_rouser,$db_ropass);

# Get the list of document revisions modified in the last N days

my $DocRevID;
my @DocRevIDs = ();
my $RevisionList = $dbh -> prepare("select DocRevID from DocumentRevision where TO_DAYS(NOW())-TO_DAYS(Timestamp)<=?"); 
$RevisionList -> execute($Days);
$RevisionList -> bind_columns(undef, \($DocRevID));
while ($RevisionList -> fetch) {
  push @DocRevIDs,$DocRevID;
}

# Loop over DocRevIDs, append to list of DocumentIDs for each user

my %AddressDocuments = ();
foreach my $DocRevID (@DocRevIDs) {
  FetchDocRevisionByID($DocRevID);
  my $DocumentID =  $DocRevisions{$DocRevID}{DOCID};
  my @EmailAddresses = UsersToNotify($DocRevID,{-period => $Period} );
  foreach my $Address (@EmailAddresses) {
    push @{ $AddressDocuments{$Address} },$DocumentID;
  }  
}

# Build a personal E-mail for each user

foreach my $Address (keys %AddressDocuments) {
  my @DocumentIDs = @{ $AddressDocuments{$Address} };
  @DocumentIDs = sort numerically Unique(@DocumentIDs); # They want these docs
  if (@DocumentIDs) {
    print "$Address will receive e-mail for documents ",join (', ',@DocumentIDs),"\n";

# Write the mail
  
    $Mailer = new Mail::Mailer 'smtp', Server => $MailServer;
#    $Mailer = new Mail::Mailer 'test', Server => $MailServer;

    $Headers{To} = $Address;
    $Headers{From} = "$Project Document Database <$DBWebMasterEmail>";
    $Headers{Subject} = "$Period changes to $Project DocDB";
    $Mailer -> open(\%Headers);    # Start mail with headers
    print $Mailer "The following documents were changed in the $Project Document Database ";
    if ($Period eq "Daily") {
      print $Mailer "yesterday:\n\n";
    } elsif ($Period eq "Weekly") {
      print $Mailer "in the last week:\n\n";
    }
    foreach my $DocumentID (@DocumentIDs) {
      FetchDocument($DocumentID);
      my $DocRevID = FetchRevisionByDocumentAndVersion($DocumentID,$Documents{$DocumentID}{NVersions});
      RevisionMailBody($DocRevID);         # Write the body
      print $Mailer "\n","-" x 72,"\n\n";  # Write a divider
    } 
    $Mailer -> close;                      # Complete the message and send it
  }
}

exit;
